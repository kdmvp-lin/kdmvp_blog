import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as i,a as n,b as s,d as t,g as e}from"./app-CwGtXWoO.js";const c={},u=e(`<h1 id="java笔记" tabindex="-1"><a class="header-anchor" href="#java笔记"><span>Java笔记</span></a></h1><h2 id="_1-环境配置" tabindex="-1"><a class="header-anchor" href="#_1-环境配置"><span>1.环境配置</span></a></h2><p>​ 先下载对应版本的jdk下载完后配置环境变量</p><p>​ 环境变量配置过程：</p><blockquote><p>配置java环境变量的方法：1、右键点击【计算机】，选择【属性】，点击【高级系统设置】，打开环境变量设置；2、新建【JAVA_HOME】变量，并编辑【Path】变量；3、新建【Classpath】变量并编辑即可。</p><p>1.首先右击【计算机】进入【属性】然后选择其中的【高级系统设置】。</p><p>2.点击进入【高级】中的【环境变量】，进入环境变量编辑界面。</p><p>3.在下方的【系统变量】中，并不存在JAVA_HOME变量,那么我们需要点击【新建】</p><p>4.变量名输入：JAVA_HOME 变量值指的是实际的安装路径（比如小编的路径为：C:\\Program Files\\Java\\jdk-9），最后点击确定。</p><p>5.Path变量设置同样是在【系统变量中】我们可以看到path变量已经存在，那么我们只需要点击【编辑】，进入path变量的编辑</p><p>6.变量名不变，变量值改为【%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;】，最后点击确定。</p><p>7.Classpath变量设置同样的，在系统变量中也不存在Classpath变量。点击进入【新建】</p><p>8.变量名键入【Classpath】变量值键入【.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; 】</p></blockquote><p>在【开始】中搜索【cmd】，然后在键入【java】以及【javac】，出现相应信息，说明配置成功</p><h2 id="_2-在记事本中写java程序" tabindex="-1"><a class="header-anchor" href="#_2-在记事本中写java程序"><span>2.在记事本中写java程序</span></a></h2><p>​ 在创建一个文本文档并将后缀改成.java成功显示为java源文件后就可以开始写</p><p>​ 第一个程序HelloWorld：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写完保存后需要打开cmd命令然后先来到程序对应路径后再输入&#39;javac HelloWorld&#39;这就相当于对文件进行编译，若出现错误会报错若没显示就可以输入&#39;java HelloWorld&#39;输出文件运行的结果</p><blockquote><p>编译成功后文件夹中会多出一个.class为后缀的文件</p></blockquote><h2 id="_3-使用eclipse写java程序" tabindex="-1"><a class="header-anchor" href="#_3-使用eclipse写java程序"><span>3.使用eclipse写java程序</span></a></h2><p>​ 首先先创建一个java project来存放代码</p><figure><img src="https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220222165502729.png" alt="image-20220222165502729" tabindex="0" loading="lazy"><figcaption>image-20220222165502729</figcaption></figure><p>​ 然后再在src文件中创建class文件</p><figure><img src="https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220222165641208.png" alt="image-20220222165641208" tabindex="0" loading="lazy"><figcaption>image-20220222165641208</figcaption></figure><h2 id="_4-基本语法" tabindex="-1"><a class="header-anchor" href="#_4-基本语法"><span>4.基本语法</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 第一个Java程序
     * 它将输出字符串 Hello World
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello World</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220222193013727.png" alt="image-20220222193013727" tabindex="0" loading="lazy"><figcaption>image-20220222193013727</figcaption></figure><p>编写 Java 程序时，应注意以下几点：</p><ul><li><p><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</p></li><li><p><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</p></li><li><p><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</p></li><li><p><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</p></li><li><p><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</p><p>Java 变量</p><p>Java 中主要有如下几种类型的变量</p><ul><li>局部变量</li><li>类变量（静态变量）</li><li>成员变量（非静态变量）</li></ul></li></ul><h2 id="_5-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_5-基本数据类型"><span>5.基本数据类型</span></a></h2><p><strong>byte：</strong></p><ul><li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li><li>最小值是 <strong>-128（-2^7）</strong>；</li><li>最大值是 <strong>127（2^7-1）</strong>；</li><li>默认值是 <strong>0</strong>；</li><li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li><li>例子：byte a = 100，byte b = -50。</li></ul><p><strong>short：</strong></p><ul><li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li><li>最小值是 <strong>-32768（-2^15）</strong>；</li><li>最大值是 <strong>32767（2^15 - 1）</strong>；</li><li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li><li>默认值是 <strong>0</strong>；</li><li>例子：short s = 1000，short r = -20000。</li></ul><p><strong>int：</strong></p><ul><li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li><li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li><li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li><li>一般地整型变量默认为 int 类型；</li><li>默认值是 <strong>0</strong> ；</li><li>例子：int a = 100000, int b = -200000。</li></ul><p><strong>long：</strong></p><ul><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li><li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li><li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li><li>这种类型主要使用在需要比较大整数的系统上；</li><li>默认值是 <strong>0L</strong>；</li><li>例子： long a = 100000L，Long b = -200000L。 &quot;L&quot;理论上不分大小写，但是若写成&quot;l&quot;容易与数字&quot;1&quot;混淆，不容易分辩。所以最好大写。</li></ul><p><strong>float：</strong></p><ul><li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li><li>float 在储存大型浮点数组的时候可节省内存空间；</li><li>默认值是 <strong>0.0f</strong>；</li><li>浮点数不能用来表示精确的值，如货币；</li><li>例子：float f1 = 234.5f。</li></ul><p><strong>double：</strong></p><ul><li>double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；</li><li>浮点数的默认类型为 double 类型；</li><li>double类型同样不能表示精确的值，如货币；</li></ul><p><strong>boolean：</strong></p><ul><li>boolean数据类型表示一位的信息；</li><li>只有两个取值：true 和 false；</li><li>这种类型只作为一种标志来记录 true/false 情况；</li><li>默认值是 <strong>false</strong>；</li><li>例子：boolean one = true。</li></ul><p><strong>char：</strong></p><ul><li>char 类型是一个单一的 16 位 Unicode 字符；</li><li>最小值是 <strong>\\u0000</strong>（十进制等效值为 0）；</li><li>最大值是 <strong>\\uffff</strong>（即为 65535）；</li><li>char 数据类型可以储存任何字符；</li><li>例子：char letter = &#39;A&#39;;。</li></ul><h2 id="_6-变量类型" tabindex="-1"><a class="header-anchor" href="#_6-变量类型"><span>6.变量类型</span></a></h2><p>java中的变量类型大致分为三类：</p><ul><li>类变量：独立于方法之外的变量，用 static 修饰。</li><li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li><li>局部变量：类的方法中的变量。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> allClicks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 类变量 </span>
    
    <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 实例变量</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 
        <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 局部变量</span>
 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量"><span>局部变量</span></a></h3><ul><li>局部变量声明在方法、构造方法或者语句块中；</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li><li>访问修饰符不能用于局部变量；</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li><li>局部变量是在栈上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li></ul><h3 id="实例变量" tabindex="-1"><a class="header-anchor" href="#实例变量"><span>实例变量</span></a></h3><ul><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li><li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li><li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li><li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li><li>实例变量可以声明在使用前或者使用后；</li><li>访问修饰符可以修饰实例变量；</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li><li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li><li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li></ul><h3 id="类变量-静态变量" tabindex="-1"><a class="header-anchor" href="#类变量-静态变量"><span>类变量（静态变量）</span></a></h3><ul><li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li><li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li><li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li><li>静态变量在第一次被访问时创建，在程序结束时销毁。</li><li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li><li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li><li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li><li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token comment">//salary是静态的私有变量</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>
    <span class="token comment">// DEPARTMENT是一个常量</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEPARTMENT</span> <span class="token operator">=</span> <span class="token string">&quot;开发人员&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    salary <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">DEPARTMENT</span><span class="token operator">+</span><span class="token string">&quot;平均工资:&quot;</span><span class="token operator">+</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-修饰符" tabindex="-1"><a class="header-anchor" href="#_7-修饰符"><span>7.修饰符</span></a></h2><p>java中的修饰符分为这两类</p><ul><li>访问修饰符</li><li>非访问修饰符</li></ul><h3 id="访问控制修饰符" tabindex="-1"><a class="header-anchor" href="#访问控制修饰符"><span>访问控制修饰符</span></a></h3><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul>`,55),r=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"修饰符"),n("th",{style:{"text-align":"left"}},"当前类"),n("th",{style:{"text-align":"left"}},"同一包内"),n("th",{style:{"text-align":"left"}},"子孙类(同一包)"),n("th",{style:{"text-align":"left"}},"子孙类(不同包)"),n("th",{style:{"text-align":"left"}},"其他包")])],-1),d=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"public")]),n("td",{style:{"text-align":"left"}},"Y"),n("td",{style:{"text-align":"left"}},"Y"),n("td",{style:{"text-align":"left"}},"Y"),n("td",{style:{"text-align":"left"}},"Y"),n("td",{style:{"text-align":"left"}},"Y")],-1),k=n("td",{style:{"text-align":"left"}},[n("code",null,"protected")],-1),v=n("td",{style:{"text-align":"left"}},"Y",-1),m=n("td",{style:{"text-align":"left"}},"Y",-1),g=n("td",{style:{"text-align":"left"}},"Y",-1),h={style:{"text-align":"left"}},b={href:"https://www.runoob.com/java/java-modifier-types.html#protected-desc",target:"_blank",rel:"noopener noreferrer"},f=n("td",{style:{"text-align":"left"}},"N",-1),y=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"default")]),n("td",{style:{"text-align":"left"}},"Y"),n("td",{style:{"text-align":"left"}},"Y"),n("td",{style:{"text-align":"left"}},"Y"),n("td",{style:{"text-align":"left"}},"N"),n("td",{style:{"text-align":"left"}},"N")],-1),_=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"private")]),n("td",{style:{"text-align":"left"}},"Y"),n("td",{style:{"text-align":"left"}},"N"),n("td",{style:{"text-align":"left"}},"N"),n("td",{style:{"text-align":"left"}},"N"),n("td",{style:{"text-align":"left"}},"N")],-1),x=e(`<h3 id="非访问修饰符" tabindex="-1"><a class="header-anchor" href="#非访问修饰符"><span>非访问修饰符</span></a></h3><ul><li>static 修饰符，用来修饰类方法和类变量。</li><li>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li><li>abstract 修饰符，用来创建抽象类和抽象方法。</li><li>synchronized 和 volatile 修饰符，主要用于线程的编程。</li></ul><h2 id="_8-运算符" tabindex="-1"><a class="header-anchor" href="#_8-运算符"><span>8.运算符</span></a></h2><p>运算符分为以下几种：</p><ul><li>算术运算符</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">加法 - 相加运算符两侧的值</td><td style="text-align:left;">A + B 等于 30</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">减法 - 左操作数减去右操作数</td><td style="text-align:left;">A – B 等于 -10</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">乘法 - 相乘操作符两侧的值</td><td style="text-align:left;">A * B等于200</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">除法 - 左操作数除以右操作数</td><td style="text-align:left;">B / A等于2</td></tr><tr><td style="text-align:left;">％</td><td style="text-align:left;">取余 - 左操作数除以右操作数的余数</td><td style="text-align:left;">B%A等于0</td></tr><tr><td style="text-align:left;">++</td><td style="text-align:left;">自增: 操作数的值增加1</td><td style="text-align:left;">B++ 或 ++B 等于 21</td></tr><tr><td style="text-align:left;">--</td><td style="text-align:left;">自减: 操作数的值减少1</td><td style="text-align:left;">B-- 或 --B 等于 19</td></tr></tbody></table><blockquote><p>在整型的情况下/就是整除只取整数部分</p><p>在浮点型情况下则会显示小数</p><p>++A是自先加再算，A++是先算再自加</p></blockquote><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left;">（A == B）为假。</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td style="text-align:left;">(A != B) 为真。</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td style="text-align:left;">（A&gt; B）为假。</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td style="text-align:left;">（A &lt;B）为真。</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:left;">（A&gt; = B）为假。</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:left;">（A &lt;= B）为真。</td></tr></tbody></table><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">＆</td><td style="text-align:left;">如果相对应位都是1，则结果为1，否则为0</td><td style="text-align:left;">（A＆B），得到12，即0000 1100</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">如果相对应位都是 0，则结果为 0，否则为 1</td><td style="text-align:left;">（A | B）得到61，即 0011 1101</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">如果相对应位值相同，则结果为0，否则为1</td><td style="text-align:left;">（A ^ B）得到49，即 0011 0001</td></tr><tr><td style="text-align:left;">〜</td><td style="text-align:left;">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td style="text-align:left;">（〜A）得到-61，即1100 0011</td></tr><tr><td style="text-align:left;">&lt;&lt;</td><td style="text-align:left;">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td style="text-align:left;">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td style="text-align:left;">&gt;&gt;</td><td style="text-align:left;">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td style="text-align:left;">A &gt;&gt; 2得到15即 1111</td></tr><tr><td style="text-align:left;">&gt;&gt;&gt;</td><td style="text-align:left;">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td style="text-align:left;">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td style="text-align:left;">（A &amp;&amp; B）为假。</td></tr><tr><td style="text-align:left;">| |</td><td style="text-align:left;">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td style="text-align:left;">（A | | B）为真。</td></tr><tr><td style="text-align:left;">！</td><td style="text-align:left;">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td style="text-align:left;">！（A &amp;&amp; B）为真。</td></tr></tbody></table><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">=</td><td style="text-align:left;">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td style="text-align:left;">C = A + B将把A + B得到的值赋给C</td></tr><tr><td style="text-align:left;">+ =</td><td style="text-align:left;">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td style="text-align:left;">C + = A等价于C = C + A</td></tr><tr><td style="text-align:left;">- =</td><td style="text-align:left;">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td style="text-align:left;">C - = A等价于C = C - A</td></tr><tr><td style="text-align:left;">* =</td><td style="text-align:left;">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td style="text-align:left;">C * = A等价于C = C * A</td></tr><tr><td style="text-align:left;">/ =</td><td style="text-align:left;">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td style="text-align:left;">C / = A，C 与 A 同类型时等价于 C = C / A</td></tr><tr><td style="text-align:left;">（％）=</td><td style="text-align:left;">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td style="text-align:left;">C％= A等价于C = C％A</td></tr><tr><td style="text-align:left;">&lt;&lt; =</td><td style="text-align:left;">左移位赋值运算符</td><td style="text-align:left;">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left;">&gt;&gt; =</td><td style="text-align:left;">右移位赋值运算符</td><td style="text-align:left;">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left;">＆=</td><td style="text-align:left;">按位与赋值运算符</td><td style="text-align:left;">C＆= 2等价于C = C＆2</td></tr><tr><td style="text-align:left;">^ =</td><td style="text-align:left;">按位异或赋值操作符</td><td style="text-align:left;">C ^ = 2等价于C = C ^ 2</td></tr><tr><td style="text-align:left;">| =</td><td style="text-align:left;">按位或赋值操作符</td><td style="text-align:left;">C | = 2等价于C = C | 2</td></tr></tbody></table><h2 id="_9-循环语句" tabindex="-1"><a class="header-anchor" href="#_9-循环语句"><span>9.循环语句</span></a></h2><p>Java中有三种主要的循环结构：</p><ul><li><strong>while</strong> 循环</li><li><strong>do…while</strong> 循环</li><li><strong>for</strong> 循环</li></ul><h3 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span> 布尔表达式 <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//循环内容</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要布尔表达式为 true，循环就会一直执行下去。</p><h3 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环"><span>do…while 循环</span></a></h3><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p><p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
       <span class="token comment">//代码语句</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 更新<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//代码语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。</li></ul></blockquote><p>例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;value of x : &quot;</span> <span class="token operator">+</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="java-增强-for-循环" tabindex="-1"><a class="header-anchor" href="#java-增强-for-循环"><span>Java 增强 for 循环</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句 <span class="token operator">:</span> 表达式<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">//代码句子</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ **声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p>**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> numbers <span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Larry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lacy&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> name <span class="token operator">:</span> names <span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="break-关键字" tabindex="-1"><a class="header-anchor" href="#break-关键字"><span>break 关键字</span></a></h3><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p><p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p><p>例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> numbers <span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// x 等于 30 时跳出循环</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> <span class="token number">30</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="continue-关键字" tabindex="-1"><a class="header-anchor" href="#continue-关键字"><span>continue 关键字</span></a></h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p><p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p><p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p><p>例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> numbers <span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> <span class="token number">30</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-条件语句" tabindex="-1"><a class="header-anchor" href="#_10-条件语句"><span>10.条件语句</span></a></h2><p>​ 语法:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式为true将执行的语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
 
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
      <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;这是 if 语句&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ if...else语句</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式的值为true</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式的值为false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式 1的值为true执行代码</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式 2的值为true执行代码</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式 3的值为true执行代码</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token comment">//如果以上布尔表达式都不为true执行代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-switch-case-语句" tabindex="-1"><a class="header-anchor" href="#_11-switch-case-语句"><span>11.switch case 语句</span></a></h2><p>​ 语法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> value <span class="token operator">:</span>
       <span class="token comment">//语句</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>
    <span class="token keyword">case</span> value <span class="token operator">:</span>
       <span class="token comment">//语句</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>
    <span class="token comment">//你可以有任意数量的case语句</span>
    <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token comment">//可选</span>
       <span class="token comment">//语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li><li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li><li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li><li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li><li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li></ul></blockquote><p>例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//char grade = args[0].charAt(0);</span>
      <span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span>
 
      <span class="token keyword">switch</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
         <span class="token keyword">case</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token keyword">case</span> <span class="token char">&#39;B&#39;</span> <span class="token operator">:</span>
         <span class="token keyword">case</span> <span class="token char">&#39;C&#39;</span> <span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;良好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token keyword">case</span> <span class="token char">&#39;D&#39;</span> <span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token keyword">case</span> <span class="token char">&#39;F&#39;</span> <span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你需要再努力努力&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token keyword">default</span> <span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未知等级&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你的等级是 &quot;</span> <span class="token operator">+</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-scanner-类-键盘输入" tabindex="-1"><a class="header-anchor" href="#_12-scanner-类-键盘输入"><span>12.Scanner 类（键盘输入）</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来需要通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据</p><p>除此之外还需要先引入</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从键盘接收数据</span>
 
        <span class="token comment">// next方式接收字符串</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;next方式接收：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否还有输入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> str1 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数据为：&quot;</span> <span class="token operator">+</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 nextLine 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从键盘接收数据</span>
 
        <span class="token comment">// nextLine方式接收字符串</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;nextLine方式接收：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否还有输入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> str2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数据为：&quot;</span> <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>next() 与 nextLine() 区别</p><p>next():</p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next() 不能得到带有空格的字符串。</li></ul><p>nextLine()：</p><ul><li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>2、可以获得空白。</li></ul><p>但是如果输入的是不是字符类型时需要的是使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p><p>int型：nextInt()</p><p>float型: nextFloat()</p><p>double型: nextDouble()</p><p>boolean型: nextBoolean()</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从键盘接收数据</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入整数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断输入的是否是整数</span>
            i <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 接收整数</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;整数数据：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 输入错误的信息</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的不是整数！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入小数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断输入的是否是小数</span>
            f <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 接收小数</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小数数据：&quot;</span> <span class="token operator">+</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 输入错误的信息</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的不是小数！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-number-math-类方法" tabindex="-1"><a class="header-anchor" href="#_13-number-math-类方法"><span>13.Number &amp; Math 类方法</span></a></h2>`,82),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"序号"),n("th",{style:{"text-align":"left"}},"方法与描述")])],-1),j=n("td",{style:{"text-align":"left"}},"1",-1),S={style:{"text-align":"left"}},q={href:"https://www.runoob.com/java/number-xxxvalue.html",target:"_blank",rel:"noopener noreferrer"},A=n("td",{style:{"text-align":"left"}},"2",-1),C={style:{"text-align":"left"}},E={href:"https://www.runoob.com/java/number-compareto.html",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"left"}},"3",-1),I={style:{"text-align":"left"}},O={href:"https://www.runoob.com/java/number-equals.html",target:"_blank",rel:"noopener noreferrer"},J=n("td",{style:{"text-align":"left"}},"4",-1),N={style:{"text-align":"left"}},M={href:"https://www.runoob.com/java/number-valueof.html",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"left"}},"5",-1),L={style:{"text-align":"left"}},V={href:"https://www.runoob.com/java/number-tostring.html",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"left"}},"6",-1),P={style:{"text-align":"left"}},D={href:"https://www.runoob.com/java/number-parseInt.html",target:"_blank",rel:"noopener noreferrer"},W=n("td",{style:{"text-align":"left"}},"7",-1),Y={style:{"text-align":"left"}},F={href:"https://www.runoob.com/java/number-abs.html",target:"_blank",rel:"noopener noreferrer"},R=n("td",{style:{"text-align":"left"}},"8",-1),z={style:{"text-align":"left"}},U={href:"https://www.runoob.com/java/number-ceil.html",target:"_blank",rel:"noopener noreferrer"},Z=n("td",{style:{"text-align":"left"}},"9",-1),X={style:{"text-align":"left"}},G={href:"https://www.runoob.com/java/number-floor.html",target:"_blank",rel:"noopener noreferrer"},K=n("td",{style:{"text-align":"left"}},"10",-1),Q={style:{"text-align":"left"}},$={href:"https://www.runoob.com/java/number-rint.html",target:"_blank",rel:"noopener noreferrer"},nn=n("td",{style:{"text-align":"left"}},"11",-1),sn={style:{"text-align":"left"}},an={href:"https://www.runoob.com/java/number-round.html",target:"_blank",rel:"noopener noreferrer"},tn=n("strong",null,"四舍五入",-1),en=n("strong",null,"Math.floor(x+0.5)",-1),ln=n("td",{style:{"text-align":"left"}},"12",-1),pn={style:{"text-align":"left"}},on={href:"https://www.runoob.com/java/number-min.html",target:"_blank",rel:"noopener noreferrer"},cn=n("td",{style:{"text-align":"left"}},"13",-1),un={style:{"text-align":"left"}},rn={href:"https://www.runoob.com/java/number-max.html",target:"_blank",rel:"noopener noreferrer"},dn=n("td",{style:{"text-align":"left"}},"14",-1),kn={style:{"text-align":"left"}},vn={href:"https://www.runoob.com/java/number-exp.html",target:"_blank",rel:"noopener noreferrer"},mn=n("td",{style:{"text-align":"left"}},"15",-1),gn={style:{"text-align":"left"}},hn={href:"https://www.runoob.com/java/number-log.html",target:"_blank",rel:"noopener noreferrer"},bn=n("td",{style:{"text-align":"left"}},"16",-1),fn={style:{"text-align":"left"}},yn={href:"https://www.runoob.com/java/number-pow.html",target:"_blank",rel:"noopener noreferrer"},_n=n("td",{style:{"text-align":"left"}},"17",-1),xn={style:{"text-align":"left"}},wn={href:"https://www.runoob.com/java/number-sqrt.html",target:"_blank",rel:"noopener noreferrer"},jn=n("td",{style:{"text-align":"left"}},"18",-1),Sn={style:{"text-align":"left"}},qn={href:"https://www.runoob.com/java/number-sin.html",target:"_blank",rel:"noopener noreferrer"},An=n("td",{style:{"text-align":"left"}},"19",-1),Cn={style:{"text-align":"left"}},En={href:"https://www.runoob.com/java/number-cos.html",target:"_blank",rel:"noopener noreferrer"},Bn=n("td",{style:{"text-align":"left"}},"20",-1),In={style:{"text-align":"left"}},On={href:"https://www.runoob.com/java/number-tan.html",target:"_blank",rel:"noopener noreferrer"},Jn=n("td",{style:{"text-align":"left"}},"21",-1),Nn={style:{"text-align":"left"}},Mn={href:"https://www.runoob.com/java/number-asin.html",target:"_blank",rel:"noopener noreferrer"},Tn=n("td",{style:{"text-align":"left"}},"22",-1),Ln={style:{"text-align":"left"}},Vn={href:"https://www.runoob.com/java/number-acos.html",target:"_blank",rel:"noopener noreferrer"},Hn=n("td",{style:{"text-align":"left"}},"23",-1),Pn={style:{"text-align":"left"}},Dn={href:"https://www.runoob.com/java/number-atan.html",target:"_blank",rel:"noopener noreferrer"},Wn=n("td",{style:{"text-align":"left"}},"24",-1),Yn={style:{"text-align":"left"}},Fn={href:"https://www.runoob.com/java/number-atan2.html",target:"_blank",rel:"noopener noreferrer"},Rn=n("td",{style:{"text-align":"left"}},"25",-1),zn={style:{"text-align":"left"}},Un={href:"https://www.runoob.com/java/number-todegrees.html",target:"_blank",rel:"noopener noreferrer"},Zn=n("td",{style:{"text-align":"left"}},"26",-1),Xn={style:{"text-align":"left"}},Gn={href:"https://www.runoob.com/java/number-toradians.html",target:"_blank",rel:"noopener noreferrer"},Kn=n("td",{style:{"text-align":"left"}},"27",-1),Qn={style:{"text-align":"left"}},$n={href:"https://www.runoob.com/java/number-random.html",target:"_blank",rel:"noopener noreferrer"},ns=e(`<h2 id="_14-character-类" tabindex="-1"><a class="header-anchor" href="#_14-character-类"><span>14.Character 类</span></a></h2><p>char是character类在对象中的基本数据类型</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
 
<span class="token comment">// Unicode 字符表示形式</span>
<span class="token keyword">char</span> uniChar <span class="token operator">=</span> <span class="token char">&#39;\\u039A&#39;</span><span class="token punctuation">;</span> 
 
<span class="token comment">// 字符数组</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3>`,4),ss=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"序号"),n("th",{style:{"text-align":"left"}},"方法与描述")])],-1),as=n("td",{style:{"text-align":"left"}},"1",-1),ts={style:{"text-align":"left"}},es={href:"https://www.runoob.com/java/character-isletter.html",target:"_blank",rel:"noopener noreferrer"},ls=n("td",{style:{"text-align":"left"}},"2",-1),ps={style:{"text-align":"left"}},os={href:"https://www.runoob.com/java/character-isdigit.html",target:"_blank",rel:"noopener noreferrer"},is=n("td",{style:{"text-align":"left"}},"3",-1),cs={style:{"text-align":"left"}},us={href:"https://www.runoob.com/java/character-iswhitespace.html",target:"_blank",rel:"noopener noreferrer"},rs=n("td",{style:{"text-align":"left"}},"4",-1),ds={style:{"text-align":"left"}},ks={href:"https://www.runoob.com/java/character-isuppercase.html",target:"_blank",rel:"noopener noreferrer"},vs=n("td",{style:{"text-align":"left"}},"5",-1),ms={style:{"text-align":"left"}},gs={href:"https://www.runoob.com/java/character-islowercase.html",target:"_blank",rel:"noopener noreferrer"},hs=n("td",{style:{"text-align":"left"}},"6",-1),bs={style:{"text-align":"left"}},fs={href:"https://www.runoob.com/java/character-touppercase.html",target:"_blank",rel:"noopener noreferrer"},ys=n("td",{style:{"text-align":"left"}},"7",-1),_s={style:{"text-align":"left"}},xs={href:"https://www.runoob.com/java/character-tolowercase.html",target:"_blank",rel:"noopener noreferrer"},ws=n("td",{style:{"text-align":"left"}},"8",-1),js={style:{"text-align":"left"}},Ss={href:"https://www.runoob.com/java/character-tostring.html",target:"_blank",rel:"noopener noreferrer"},qs=e(`<h2 id="_15-转义字符" tabindex="-1"><a class="header-anchor" href="#_15-转义字符"><span>15.转义字符</span></a></h2><table><thead><tr><th style="text-align:left;">转义序列</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">在文中该处插入一个tab键</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">在文中该处插入一个后退键</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">在文中该处换行</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">在文中该处插入回车</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">在文中该处插入换页符</td></tr><tr><td style="text-align:left;">&#39;</td><td style="text-align:left;">在文中该处插入单引号</td></tr><tr><td style="text-align:left;">&quot;</td><td style="text-align:left;">在文中该处插入双引号</td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">在文中该处插入反斜杠</td></tr></tbody></table><h2 id="_16-string-类" tabindex="-1"><a class="header-anchor" href="#_16-string-类"><span>16.String 类</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//定义一个字符串并赋值</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//使用构造函数来构造</span>
<span class="token class-name">String</span> str2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//使用构造函数来把字符数组赋给字符串</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1"><span>方法</span></a></h3>`,7),As=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"SN(序号)"),n("th",{style:{"text-align":"left"}},"方法描述")])],-1),Cs=n("td",{style:{"text-align":"left"}},"1",-1),Es={style:{"text-align":"left"}},Bs={href:"https://www.runoob.com/java/java-string-charat.html",target:"_blank",rel:"noopener noreferrer"},Is=n("td",{style:{"text-align":"left"}},"2",-1),Os={style:{"text-align":"left"}},Js={href:"https://www.runoob.com/java/java-string-compareto.html",target:"_blank",rel:"noopener noreferrer"},Ns=n("td",{style:{"text-align":"left"}},"3",-1),Ms={style:{"text-align":"left"}},Ts={href:"https://www.runoob.com/java/java-string-compareto.html",target:"_blank",rel:"noopener noreferrer"},Ls=n("td",{style:{"text-align":"left"}},"4",-1),Vs={style:{"text-align":"left"}},Hs={href:"https://www.runoob.com/java/java-string-comparetoignorecase.html",target:"_blank",rel:"noopener noreferrer"},Ps=n("td",{style:{"text-align":"left"}},"5",-1),Ds={style:{"text-align":"left"}},Ws={href:"https://www.runoob.com/java/java-string-concat.html",target:"_blank",rel:"noopener noreferrer"},Ys=n("td",{style:{"text-align":"left"}},"6",-1),Fs={style:{"text-align":"left"}},Rs={href:"https://www.runoob.com/java/java-string-contentequals.html",target:"_blank",rel:"noopener noreferrer"},zs=n("td",{style:{"text-align":"left"}},"7",-1),Us={style:{"text-align":"left"}},Zs={href:"https://www.runoob.com/java/java-string-copyvalueof.html",target:"_blank",rel:"noopener noreferrer"},Xs=n("td",{style:{"text-align":"left"}},"8",-1),Gs={style:{"text-align":"left"}},Ks={href:"https://www.runoob.com/java/java-string-copyvalueof.html",target:"_blank",rel:"noopener noreferrer"},Qs=n("td",{style:{"text-align":"left"}},"9",-1),$s={style:{"text-align":"left"}},na={href:"https://www.runoob.com/java/java-string-endswith.html",target:"_blank",rel:"noopener noreferrer"},sa=n("td",{style:{"text-align":"left"}},"10",-1),aa={style:{"text-align":"left"}},ta={href:"https://www.runoob.com/java/java-string-equals.html",target:"_blank",rel:"noopener noreferrer"},ea=n("td",{style:{"text-align":"left"}},"11",-1),la={style:{"text-align":"left"}},pa={href:"https://www.runoob.com/java/java-string-equalsignorecase.html",target:"_blank",rel:"noopener noreferrer"},oa=n("td",{style:{"text-align":"left"}},"12",-1),ia={style:{"text-align":"left"}},ca={href:"https://www.runoob.com/java/java-string-getbytes.html",target:"_blank",rel:"noopener noreferrer"},ua=n("td",{style:{"text-align":"left"}},"13",-1),ra={style:{"text-align":"left"}},da={href:"https://www.runoob.com/java/java-string-getbytes.html",target:"_blank",rel:"noopener noreferrer"},ka=n("td",{style:{"text-align":"left"}},"14",-1),va={style:{"text-align":"left"}},ma={href:"https://www.runoob.com/java/java-string-getchars.html",target:"_blank",rel:"noopener noreferrer"},ga=n("td",{style:{"text-align":"left"}},"15",-1),ha={style:{"text-align":"left"}},ba={href:"https://www.runoob.com/java/java-string-hashcode.html",target:"_blank",rel:"noopener noreferrer"},fa=n("td",{style:{"text-align":"left"}},"16",-1),ya={style:{"text-align":"left"}},_a={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},xa=n("td",{style:{"text-align":"left"}},"17",-1),wa={style:{"text-align":"left"}},ja={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},Sa=n("td",{style:{"text-align":"left"}},"18",-1),qa={style:{"text-align":"left"}},Aa={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},Ca=n("td",{style:{"text-align":"left"}},"19",-1),Ea={style:{"text-align":"left"}},Ba={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},Ia=n("td",{style:{"text-align":"left"}},"20",-1),Oa={style:{"text-align":"left"}},Ja={href:"https://www.runoob.com/java/java-string-intern.html",target:"_blank",rel:"noopener noreferrer"},Na=n("td",{style:{"text-align":"left"}},"21",-1),Ma={style:{"text-align":"left"}},Ta={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},La=n("td",{style:{"text-align":"left"}},"22",-1),Va={style:{"text-align":"left"}},Ha={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},Pa=n("td",{style:{"text-align":"left"}},"23",-1),Da={style:{"text-align":"left"}},Wa={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},Ya=n("td",{style:{"text-align":"left"}},"24",-1),Fa={style:{"text-align":"left"}},Ra={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},za=n("td",{style:{"text-align":"left"}},"25",-1),Ua={style:{"text-align":"left"}},Za={href:"https://www.runoob.com/java/java-string-length.html",target:"_blank",rel:"noopener noreferrer"},Xa=n("td",{style:{"text-align":"left"}},"26",-1),Ga={style:{"text-align":"left"}},Ka={href:"https://www.runoob.com/java/java-string-matches.html",target:"_blank",rel:"noopener noreferrer"},Qa=n("td",{style:{"text-align":"left"}},"27",-1),$a={style:{"text-align":"left"}},nt={href:"https://www.runoob.com/java/java-string-regionmatches.html",target:"_blank",rel:"noopener noreferrer"},st=n("td",{style:{"text-align":"left"}},"28",-1),at={style:{"text-align":"left"}},tt={href:"https://www.runoob.com/java/java-string-regionmatches.html",target:"_blank",rel:"noopener noreferrer"},et=n("td",{style:{"text-align":"left"}},"29",-1),lt={style:{"text-align":"left"}},pt={href:"https://www.runoob.com/java/java-string-replace.html",target:"_blank",rel:"noopener noreferrer"},ot=n("td",{style:{"text-align":"left"}},"30",-1),it={style:{"text-align":"left"}},ct={href:"https://www.runoob.com/java/java-string-replaceall.html",target:"_blank",rel:"noopener noreferrer"},ut=n("td",{style:{"text-align":"left"}},"31",-1),rt={style:{"text-align":"left"}},dt={href:"https://www.runoob.com/java/java-string-replacefirst.html",target:"_blank",rel:"noopener noreferrer"},kt=n("td",{style:{"text-align":"left"}},"32",-1),vt={style:{"text-align":"left"}},mt={href:"https://www.runoob.com/java/java-string-split.html",target:"_blank",rel:"noopener noreferrer"},gt=n("td",{style:{"text-align":"left"}},"33",-1),ht={style:{"text-align":"left"}},bt={href:"https://www.runoob.com/java/java-string-split.html",target:"_blank",rel:"noopener noreferrer"},ft=n("td",{style:{"text-align":"left"}},"34",-1),yt={style:{"text-align":"left"}},_t={href:"https://www.runoob.com/java/java-string-startswith.html",target:"_blank",rel:"noopener noreferrer"},xt=n("td",{style:{"text-align":"left"}},"35",-1),wt={style:{"text-align":"left"}},jt={href:"https://www.runoob.com/java/java-string-startswith.html",target:"_blank",rel:"noopener noreferrer"},St=n("td",{style:{"text-align":"left"}},"36",-1),qt={style:{"text-align":"left"}},At={href:"https://www.runoob.com/java/java-string-subsequence.html",target:"_blank",rel:"noopener noreferrer"},Ct=n("td",{style:{"text-align":"left"}},"37",-1),Et={style:{"text-align":"left"}},Bt={href:"https://www.runoob.com/java/java-string-substring.html",target:"_blank",rel:"noopener noreferrer"},It=n("td",{style:{"text-align":"left"}},"38",-1),Ot={style:{"text-align":"left"}},Jt={href:"https://www.runoob.com/java/java-string-substring.html",target:"_blank",rel:"noopener noreferrer"},Nt=n("td",{style:{"text-align":"left"}},"39",-1),Mt={style:{"text-align":"left"}},Tt={href:"https://www.runoob.com/java/java-string-tochararray.html",target:"_blank",rel:"noopener noreferrer"},Lt=n("td",{style:{"text-align":"left"}},"40",-1),Vt={style:{"text-align":"left"}},Ht={href:"https://www.runoob.com/java/java-string-tolowercase.html",target:"_blank",rel:"noopener noreferrer"},Pt=n("td",{style:{"text-align":"left"}},"41",-1),Dt={style:{"text-align":"left"}},Wt={href:"https://www.runoob.com/java/java-string-tolowercase.html",target:"_blank",rel:"noopener noreferrer"},Yt=n("td",{style:{"text-align":"left"}},"42",-1),Ft={style:{"text-align":"left"}},Rt={href:"https://www.runoob.com/java/java-string-tostring.html",target:"_blank",rel:"noopener noreferrer"},zt=n("td",{style:{"text-align":"left"}},"43",-1),Ut={style:{"text-align":"left"}},Zt={href:"https://www.runoob.com/java/java-string-touppercase.html",target:"_blank",rel:"noopener noreferrer"},Xt=n("td",{style:{"text-align":"left"}},"44",-1),Gt={style:{"text-align":"left"}},Kt={href:"https://www.runoob.com/java/java-string-touppercase.html",target:"_blank",rel:"noopener noreferrer"},Qt=n("td",{style:{"text-align":"left"}},"45",-1),$t={style:{"text-align":"left"}},ne={href:"https://www.runoob.com/java/java-string-trim.html",target:"_blank",rel:"noopener noreferrer"},se=n("td",{style:{"text-align":"left"}},"46",-1),ae={style:{"text-align":"left"}},te={href:"https://www.runoob.com/java/java-string-valueof.html",target:"_blank",rel:"noopener noreferrer"},ee=n("td",{style:{"text-align":"left"}},"47",-1),le={style:{"text-align":"left"}},pe={href:"https://www.runoob.com/java/java-string-contains.html",target:"_blank",rel:"noopener noreferrer"},oe=n("td",{style:{"text-align":"left"}},"48",-1),ie={style:{"text-align":"left"}},ce={href:"https://www.runoob.com/java/java-string-isempty.html",target:"_blank",rel:"noopener noreferrer"},ue=e(`<p>例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;长度:&quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;下标为2位置上的字符:&quot;</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> s2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token comment">/*输出
Hello World
长度:11
下标为2位置上的字符:l
HeLLo WorLd
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-stringbuffer-和-stringbuilder-类" tabindex="-1"><a class="header-anchor" href="#_17-stringbuffer-和-stringbuilder-类"><span>17.StringBuffer 和 StringBuilder 类</span></a></h2><p>需要对字符串进行修改时一般采用这两个类，相比于String这两个类不会产生新的数组对象</p><h3 id="方法-2" tabindex="-1"><a class="header-anchor" href="#方法-2"><span>方法</span></a></h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">public StringBuffer append(String s) 将指定的字符串追加到此字符序列。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">public StringBuffer reverse() 将此字符序列用其反转形式取代。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">public delete(int start, int end) 移除此序列的子字符串中的字符。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">public insert(int offset, int i) 将 <code>int</code> 参数的字符串表示形式插入此序列中。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">insert(int offset, String str) 将 <code>str</code> 参数的字符串插入此序列中。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">replace(int start, int end, String str) 使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">int capacity() 返回当前容量。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">char charAt(int index) 返回此序列中指定索引处的 <code>char</code> 值。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">void ensureCapacity(int minimumCapacity) 确保容量至少等于指定的最小值。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此序列复制到目标字符数组 <code>dst</code>。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">int indexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">int indexOf(String str, int fromIndex) 从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">int lastIndexOf(String str) 返回最右边出现的指定子字符串在此字符串中的索引。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">int lastIndexOf(String str, int fromIndex) 返回 String 对象中子字符串最后出现的位置。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">int length() 返回长度（字符数）。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">void setCharAt(int index, char ch) 将给定索引处的字符设置为 <code>ch</code>。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">void setLength(int newLength) 设置字符序列的长度。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">CharSequence subSequence(int start, int end) 返回一个新的字符序列，该字符序列是此序列的子序列。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;">String substring(int start) 返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;">String substring(int start, int end) 返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列。</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;">String toString() 返回此序列中数据的字符串表示形式。</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-数组" tabindex="-1"><a class="header-anchor" href="#_18-数组"><span>18.数组</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar<span class="token punctuation">;</span>   <span class="token comment">// 首选的方法</span>
 
或
 
dataType arrayRefVar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 效果相同，但不是首选方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//创建数组</span>
arrayRefVar <span class="token operator">=</span> <span class="token keyword">new</span> dataType<span class="token punctuation">[</span>arraySize<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//例</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrays-类" tabindex="-1"><a class="header-anchor" href="#arrays-类"><span>Arrays 类</span></a></h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法和说明</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>public static int binarySearch(Object[] a, Object key)</strong> 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>public static boolean equals(long[] a, long[] a2)</strong> 如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>public static void fill(int[] a, int val)</strong> 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>public static void sort(Object[] a)</strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//需要在上面加上这个包</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>	

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> a<span class="token punctuation">)</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19日期时间" tabindex="-1"><a class="header-anchor" href="#_19日期时间"><span>19日期时间</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> time <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		 
	       <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
	       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_20-printf控制输出格式" tabindex="-1"><a class="header-anchor" href="#_20-printf控制输出格式"><span>20.printf控制输出格式</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;输出格式&quot;</span><span class="token punctuation">,</span>输出对象<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>转换符	类型	示例	转换符	类型	示例
d	十进制整数	159	s	字符串	hello
x	十六进制整数	9f	c	字符	H
o	八进制整数	237	b	布尔	true
f	定点浮点数	1.59e+01	h	散列码	42628b2
e	指数浮点数		tx或Yx	日期时间（T强制大写）	已经过时，应当改为使用 java.time 类。
g	通用浮点数(e和f中较短的一个)	——	%	百分号	%
a	16进制浮点数	0x1.fccdp3	n	与平台有关的换行符	——

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-方法" tabindex="-1"><a class="header-anchor" href="#_21-方法"><span>21.方法</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>修饰符 返回值类型 方法名(参数类型 参数名){
    ...
    方法体
    ...
    return 返回值;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>**修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li><li><strong>返回值类型 ：<strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字</strong>void</strong>。</li><li>**方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。</li><li>**参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li><li>**方法体：**方法体包含具体的语句，定义该方法的功能。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220301153218402.png" alt="image-20220301153218402" tabindex="0" loading="lazy"><figcaption>image-20220301153218402</figcaption></figure><h2 id="_22-继承" tabindex="-1"><a class="header-anchor" href="#_22-继承"><span>22.继承</span></a></h2><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//让student类继承Person</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> student <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学习&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
<span class="token comment">//让Teacher类继承Person</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;教学&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//这里可以看到student类和Teacher类已经继承到了Person</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example1</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		stu<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Teacher</span> teach <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		teach<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		teach<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		teach<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>

<span class="token comment">//输出------------------------------------------------------------------------------------------------------</span>
吃饭
睡觉
学习
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
吃饭
睡觉
教学
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承的特性" tabindex="-1"><a class="header-anchor" href="#继承的特性"><span>继承的特性</span></a></h3><ul><li>子类拥有父类非 private 的属性、方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li><li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li></ul><h3 id="继承关键字" tabindex="-1"><a class="header-anchor" href="#继承关键字"><span>继承关键字</span></a></h3><h4 id="extends关键字" tabindex="-1"><a class="header-anchor" href="#extends关键字"><span>extends关键字</span></a></h4><p>​ 在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//让student类继承Person</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> student <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学习&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="implements关键字" tabindex="-1"><a class="header-anchor" href="#implements关键字"><span>implements关键字</span></a></h4><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="super-与-this-关键字" tabindex="-1"><a class="header-anchor" href="#super-与-this-关键字"><span>super 与 this 关键字</span></a></h4><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p><p>this关键字：指向自己的引用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">&quot;kd&quot;</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span>
<span class="token comment">//让student类继承Person</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> student <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">&quot;lin&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example1</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
<span class="token punctuation">}</span>
<span class="token comment">//输出------------------------------------------------------------------------------------------------------</span>
    kd
	lin

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="final-关键字" tabindex="-1"><a class="header-anchor" href="#final-关键字"><span>final 关键字</span></a></h4><p>​ final 可以用来修饰变量（包括类属性、对象属性、局部变量和形参）、方法（包括类方法和对象方法）和类。</p><p>​ 若使用了final关键字那么，该类或者对象方法就不能被继承</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span><span class="token comment">//类体}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_23-重写和重载" tabindex="-1"><a class="header-anchor" href="#_23-重写和重载"><span>23.重写和重载</span></a></h2><h3 id="重写" tabindex="-1"><a class="header-anchor" href="#重写"><span>重写</span></a></h3><ul><li>参数列表与被重写方法的参数列表必须完全相同。</li><li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为 final 的方法不能被重写。</li><li>声明为 static 的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个类，则不能重写该类的方法。</li></ul><h4 id="super-关键字的使用" tabindex="-1"><a class="header-anchor" href="#super-关键字的使用"><span>Super 关键字的使用</span></a></h4><p>当需要在子类中调用父类的被重写方法时，要使用 super 关键字。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;动物可以移动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应用super类的方法</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;狗可以跑和走&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDog</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 
      <span class="token class-name">Animal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Dog 对象</span>
      b<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行 Dog类的方法</span>
 
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重载" tabindex="-1"><a class="header-anchor" href="#重载"><span>重载</span></a></h3><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><p>最常用的地方就是构造器的重载。</p><p><strong>重载规则:</strong></p><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Overloading</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
 
    <span class="token comment">//以下两个参数类型顺序不同</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;returntest3&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
 
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;returntest4&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Overloading</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Overloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;test3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;test4&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_24-接口" tabindex="-1"><a class="header-anchor" href="#_24-接口"><span>24.接口</span></a></h2><p>​ 接口与类相似点：</p><ul><li>一个接口可以有多个方法。</li><li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在 .class 结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ul><p>接口与类的区别：</p><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多继承。</li></ul><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">[</span>可见度<span class="token punctuation">]</span> <span class="token keyword">interface</span> 接口名称 <span class="token punctuation">[</span><span class="token keyword">extends</span> 其他的接口名<span class="token punctuation">]</span> <span class="token punctuation">{</span>
        <span class="token comment">// 声明变量</span>
        <span class="token comment">// 抽象方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_25-异常处理" tabindex="-1"><a class="header-anchor" href="#_25-异常处理"><span>25.异常处理</span></a></h2><p>非检查性</p><table><thead><tr><th style="text-align:left;"><strong>异常</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">ArithmeticException</td><td style="text-align:left;">当出现异常的运算条件时，抛出此异常。例如，一个整数&quot;除以零&quot;时，抛出此类的一个实例。</td></tr><tr><td style="text-align:left;">ArrayIndexOutOfBoundsException</td><td style="text-align:left;">用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</td></tr><tr><td style="text-align:left;">ArrayStoreException</td><td style="text-align:left;">试图将错误类型的对象存储到一个对象数组时抛出的异常。</td></tr><tr><td style="text-align:left;">ClassCastException</td><td style="text-align:left;">当试图将对象强制转换为不是实例的子类时，抛出该异常。</td></tr><tr><td style="text-align:left;">IllegalArgumentException</td><td style="text-align:left;">抛出的异常表明向方法传递了一个不合法或不正确的参数。</td></tr><tr><td style="text-align:left;">IllegalMonitorStateException</td><td style="text-align:left;">抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</td></tr><tr><td style="text-align:left;">IllegalStateException</td><td style="text-align:left;">在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。</td></tr><tr><td style="text-align:left;">IllegalThreadStateException</td><td style="text-align:left;">线程没有处于请求操作所要求的适当状态时抛出的异常。</td></tr><tr><td style="text-align:left;">IndexOutOfBoundsException</td><td style="text-align:left;">指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</td></tr><tr><td style="text-align:left;">NegativeArraySizeException</td><td style="text-align:left;">如果应用程序试图创建大小为负的数组，则抛出该异常。</td></tr><tr><td style="text-align:left;">NullPointerException</td><td style="text-align:left;">当应用程序试图在需要对象的地方使用 <code>null</code> 时，抛出该异常</td></tr><tr><td style="text-align:left;">NumberFormatException</td><td style="text-align:left;">当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</td></tr><tr><td style="text-align:left;">SecurityException</td><td style="text-align:left;">由安全管理器抛出的异常，指示存在安全侵犯。</td></tr><tr><td style="text-align:left;">StringIndexOutOfBoundsException</td><td style="text-align:left;">此异常由 <code>String</code> 方法抛出，指示索引或者为负，或者超出字符串的大小。</td></tr><tr><td style="text-align:left;">UnsupportedOperationException</td><td style="text-align:left;">当不支持请求的操作时，抛出该异常。</td></tr></tbody></table><p>检查性</p><table><thead><tr><th style="text-align:left;"><strong>异常</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">ClassNotFoundException</td><td style="text-align:left;">应用程序试图加载类时，找不到相应的类，抛出该异常。</td></tr><tr><td style="text-align:left;">CloneNotSupportedException</td><td style="text-align:left;">当调用 <code>Object</code> 类中的 <code>clone</code> 方法克隆对象，但该对象的类无法实现 <code>Cloneable</code> 接口时，抛出该异常。</td></tr><tr><td style="text-align:left;">IllegalAccessException</td><td style="text-align:left;">拒绝访问一个类的时候，抛出该异常。</td></tr><tr><td style="text-align:left;">InstantiationException</td><td style="text-align:left;">当试图使用 <code>Class</code> 类中的 <code>newInstance</code> 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</td></tr><tr><td style="text-align:left;">InterruptedException</td><td style="text-align:left;">一个线程被另一个线程中断，抛出该异常。</td></tr><tr><td style="text-align:left;">NoSuchFieldException</td><td style="text-align:left;">请求的变量不存在</td></tr><tr><td style="text-align:left;">NoSuchMethodException</td><td style="text-align:left;">请求的方法不存在</td></tr></tbody></table>`,71);function re(de,ke){const a=p("ExternalLinkIcon");return o(),i("div",null,[u,n("table",null,[r,n("tbody",null,[d,n("tr",null,[k,v,m,g,n("td",h,[s("Y/N（"),n("a",b,[s("说明"),t(a)]),s("）")]),f]),y,_])]),x,n("table",null,[w,n("tbody",null,[n("tr",null,[j,n("td",S,[n("a",q,[s("xxxValue()"),t(a)]),s(" 将 Number 对象转换为xxx数据类型的值并返回。")])]),n("tr",null,[A,n("td",C,[n("a",E,[s("compareTo()"),t(a)]),s(" 将number对象与参数比较。")])]),n("tr",null,[B,n("td",I,[n("a",O,[s("equals()"),t(a)]),s(" 判断number对象是否与参数相等。")])]),n("tr",null,[J,n("td",N,[n("a",M,[s("valueOf()"),t(a)]),s(" 返回一个 Number 对象指定的内置数据类型")])]),n("tr",null,[T,n("td",L,[n("a",V,[s("toString()"),t(a)]),s(" 以字符串形式返回值。")])]),n("tr",null,[H,n("td",P,[n("a",D,[s("parseInt()"),t(a)]),s(" 将字符串解析为int类型。")])]),n("tr",null,[W,n("td",Y,[n("a",F,[s("abs()"),t(a)]),s(" 返回参数的绝对值。")])]),n("tr",null,[R,n("td",z,[n("a",U,[s("ceil()"),t(a)]),s(" 返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。")])]),n("tr",null,[Z,n("td",X,[n("a",G,[s("floor()"),t(a)]),s(" 返回小于等于（<=）给定参数的最大整数 。")])]),n("tr",null,[K,n("td",Q,[n("a",$,[s("rint()"),t(a)]),s(" 返回与参数最接近的整数。返回类型为double。")])]),n("tr",null,[nn,n("td",sn,[n("a",an,[s("round()"),t(a)]),s(" 它表示"),tn,s("，算法为 "),en,s("，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。")])]),n("tr",null,[ln,n("td",pn,[n("a",on,[s("min()"),t(a)]),s(" 返回两个参数中的最小值。")])]),n("tr",null,[cn,n("td",un,[n("a",rn,[s("max()"),t(a)]),s(" 返回两个参数中的最大值。")])]),n("tr",null,[dn,n("td",kn,[n("a",vn,[s("exp()"),t(a)]),s(" 返回自然数底数e的参数次方。")])]),n("tr",null,[mn,n("td",gn,[n("a",hn,[s("log()"),t(a)]),s(" 返回参数的自然数底数的对数值。")])]),n("tr",null,[bn,n("td",fn,[n("a",yn,[s("pow()"),t(a)]),s(" 返回第一个参数的第二个参数次方。")])]),n("tr",null,[_n,n("td",xn,[n("a",wn,[s("sqrt()"),t(a)]),s(" 求参数的算术平方根。")])]),n("tr",null,[jn,n("td",Sn,[n("a",qn,[s("sin()"),t(a)]),s(" 求指定double类型参数的正弦值。")])]),n("tr",null,[An,n("td",Cn,[n("a",En,[s("cos()"),t(a)]),s(" 求指定double类型参数的余弦值。")])]),n("tr",null,[Bn,n("td",In,[n("a",On,[s("tan()"),t(a)]),s(" 求指定double类型参数的正切值。")])]),n("tr",null,[Jn,n("td",Nn,[n("a",Mn,[s("asin()"),t(a)]),s(" 求指定double类型参数的反正弦值。")])]),n("tr",null,[Tn,n("td",Ln,[n("a",Vn,[s("acos()"),t(a)]),s(" 求指定double类型参数的反余弦值。")])]),n("tr",null,[Hn,n("td",Pn,[n("a",Dn,[s("atan()"),t(a)]),s(" 求指定double类型参数的反正切值。")])]),n("tr",null,[Wn,n("td",Yn,[n("a",Fn,[s("atan2()"),t(a)]),s(" 将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。")])]),n("tr",null,[Rn,n("td",zn,[n("a",Un,[s("toDegrees()"),t(a)]),s(" 将参数转化为角度。")])]),n("tr",null,[Zn,n("td",Xn,[n("a",Gn,[s("toRadians()"),t(a)]),s(" 将角度转换为弧度。")])]),n("tr",null,[Kn,n("td",Qn,[n("a",$n,[s("random()"),t(a)]),s(" 返回一个随机数。")])])])]),ns,n("table",null,[ss,n("tbody",null,[n("tr",null,[as,n("td",ts,[n("a",es,[s("isLetter()"),t(a)]),s(" 是否是一个字母")])]),n("tr",null,[ls,n("td",ps,[n("a",os,[s("isDigit()"),t(a)]),s(" 是否是一个数字字符")])]),n("tr",null,[is,n("td",cs,[n("a",us,[s("isWhitespace()"),t(a)]),s(" 是否是一个空白字符")])]),n("tr",null,[rs,n("td",ds,[n("a",ks,[s("isUpperCase()"),t(a)]),s(" 是否是大写字母")])]),n("tr",null,[vs,n("td",ms,[n("a",gs,[s("isLowerCase()"),t(a)]),s(" 是否是小写字母")])]),n("tr",null,[hs,n("td",bs,[n("a",fs,[s("toUpperCase()"),t(a)]),s(" 指定字母的大写形式")])]),n("tr",null,[ys,n("td",_s,[n("a",xs,[s("toLowerCase"),t(a)]),s("() 指定字母的小写形式")])]),n("tr",null,[ws,n("td",js,[n("a",Ss,[s("toString"),t(a)]),s("() 返回字符的字符串形式，字符串的长度仅为1")])])])]),qs,n("table",null,[As,n("tbody",null,[n("tr",null,[Cs,n("td",Es,[n("a",Bs,[s("char charAt(int index)"),t(a)]),s(" 返回指定索引处的 char 值。")])]),n("tr",null,[Is,n("td",Os,[n("a",Js,[s("int compareTo(Object o)"),t(a)]),s(" 把这个字符串和另一个对象比较。")])]),n("tr",null,[Ns,n("td",Ms,[n("a",Ts,[s("int compareTo(String anotherString)"),t(a)]),s(" 按字典顺序比较两个字符串。")])]),n("tr",null,[Ls,n("td",Vs,[n("a",Hs,[s("int compareToIgnoreCase(String str)"),t(a)]),s(" 按字典顺序比较两个字符串，不考虑大小写。")])]),n("tr",null,[Ps,n("td",Ds,[n("a",Ws,[s("String concat(String str)"),t(a)]),s(" 将指定字符串连接到此字符串的结尾。")])]),n("tr",null,[Ys,n("td",Fs,[n("a",Rs,[s("boolean contentEquals(StringBuffer sb)"),t(a)]),s(" 当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。")])]),n("tr",null,[zs,n("td",Us,[s("[static String copyValueOf(char"),n("a",Zs,[s("] data)"),t(a)]),s(" 返回指定数组中表示该字符序列的 String。")])]),n("tr",null,[Xs,n("td",Gs,[s("[static String copyValueOf(char"),n("a",Ks,[s("] data, int offset, int count)"),t(a)]),s(" 返回指定数组中表示该字符序列的 String。")])]),n("tr",null,[Qs,n("td",$s,[n("a",na,[s("boolean endsWith(String suffix)"),t(a)]),s(" 测试此字符串是否以指定的后缀结束。")])]),n("tr",null,[sa,n("td",aa,[n("a",ta,[s("boolean equals(Object anObject)"),t(a)]),s(" 将此字符串与指定的对象比较。")])]),n("tr",null,[ea,n("td",la,[n("a",pa,[s("boolean equalsIgnoreCase(String anotherString)"),t(a)]),s(" 将此 String 与另一个 String 比较，不考虑大小写。")])]),n("tr",null,[oa,n("td",ia,[s("[byte"),n("a",ca,[s("] getBytes()"),t(a)]),s(" 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。")])]),n("tr",null,[ua,n("td",ra,[s("[byte"),n("a",da,[s("] getBytes(String charsetName)"),t(a)]),s(" 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。")])]),n("tr",null,[ka,n("td",va,[s("[void getChars(int srcBegin, int srcEnd, char"),n("a",ma,[s("] dst, int dstBegin)"),t(a)]),s(" 将字符从此字符串复制到目标字符数组。")])]),n("tr",null,[ga,n("td",ha,[n("a",ba,[s("int hashCode()"),t(a)]),s(" 返回此字符串的哈希码。")])]),n("tr",null,[fa,n("td",ya,[n("a",_a,[s("int indexOf(int ch)"),t(a)]),s(" 返回指定字符在此字符串中第一次出现处的索引。")])]),n("tr",null,[xa,n("td",wa,[n("a",ja,[s("int indexOf(int ch, int fromIndex)"),t(a)]),s(" 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。")])]),n("tr",null,[Sa,n("td",qa,[n("a",Aa,[s("int indexOf(String str)"),t(a)]),s(" 返回指定子字符串在此字符串中第一次出现处的索引。")])]),n("tr",null,[Ca,n("td",Ea,[n("a",Ba,[s("int indexOf(String str, int fromIndex)"),t(a)]),s(" 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。")])]),n("tr",null,[Ia,n("td",Oa,[n("a",Ja,[s("String intern()"),t(a)]),s(" 返回字符串对象的规范化表示形式。")])]),n("tr",null,[Na,n("td",Ma,[n("a",Ta,[s("int lastIndexOf(int ch)"),t(a)]),s(" 返回指定字符在此字符串中最后一次出现处的索引。")])]),n("tr",null,[La,n("td",Va,[n("a",Ha,[s("int lastIndexOf(int ch, int fromIndex)"),t(a)]),s(" 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。")])]),n("tr",null,[Pa,n("td",Da,[n("a",Wa,[s("int lastIndexOf(String str)"),t(a)]),s(" 返回指定子字符串在此字符串中最右边出现处的索引。")])]),n("tr",null,[Ya,n("td",Fa,[n("a",Ra,[s("int lastIndexOf(String str, int fromIndex)"),t(a)]),s(" 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。")])]),n("tr",null,[za,n("td",Ua,[n("a",Za,[s("int length()"),t(a)]),s(" 返回此字符串的长度。")])]),n("tr",null,[Xa,n("td",Ga,[n("a",Ka,[s("boolean matches(String regex)"),t(a)]),s(" 告知此字符串是否匹配给定的正则表达式。")])]),n("tr",null,[Qa,n("td",$a,[n("a",nt,[s("boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)"),t(a)]),s(" 测试两个字符串区域是否相等。")])]),n("tr",null,[st,n("td",at,[n("a",tt,[s("boolean regionMatches(int toffset, String other, int ooffset, int len)"),t(a)]),s(" 测试两个字符串区域是否相等。")])]),n("tr",null,[et,n("td",lt,[n("a",pt,[s("String replace(char oldChar, char newChar)"),t(a)]),s(" 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。")])]),n("tr",null,[ot,n("td",it,[n("a",ct,[s("String replaceAll(String regex, String replacement)"),t(a)]),s(" 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。")])]),n("tr",null,[ut,n("td",rt,[n("a",dt,[s("String replaceFirst(String regex, String replacement)"),t(a)]),s(" 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。")])]),n("tr",null,[kt,n("td",vt,[s("[String"),n("a",mt,[s("] split(String regex)"),t(a)]),s(" 根据给定正则表达式的匹配拆分此字符串。")])]),n("tr",null,[gt,n("td",ht,[s("[String"),n("a",bt,[s("] split(String regex, int limit)"),t(a)]),s(" 根据匹配给定的正则表达式来拆分此字符串。")])]),n("tr",null,[ft,n("td",yt,[n("a",_t,[s("boolean startsWith(String prefix)"),t(a)]),s(" 测试此字符串是否以指定的前缀开始。")])]),n("tr",null,[xt,n("td",wt,[n("a",jt,[s("boolean startsWith(String prefix, int toffset)"),t(a)]),s(" 测试此字符串从指定索引开始的子字符串是否以指定前缀开始。")])]),n("tr",null,[St,n("td",qt,[n("a",At,[s("CharSequence subSequence(int beginIndex, int endIndex)"),t(a)]),s(" 返回一个新的字符序列，它是此序列的一个子序列。")])]),n("tr",null,[Ct,n("td",Et,[n("a",Bt,[s("String substring(int beginIndex)"),t(a)]),s(" 返回一个新的字符串，它是此字符串的一个子字符串。")])]),n("tr",null,[It,n("td",Ot,[n("a",Jt,[s("String substring(int beginIndex, int endIndex)"),t(a)]),s(" 返回一个新字符串，它是此字符串的一个子字符串。")])]),n("tr",null,[Nt,n("td",Mt,[s("[char"),n("a",Tt,[s("] toCharArray()"),t(a)]),s(" 将此字符串转换为一个新的字符数组。")])]),n("tr",null,[Lt,n("td",Vt,[n("a",Ht,[s("String toLowerCase()"),t(a)]),s(" 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。")])]),n("tr",null,[Pt,n("td",Dt,[n("a",Wt,[s("String toLowerCase(Locale locale)"),t(a)]),s(" 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。")])]),n("tr",null,[Yt,n("td",Ft,[n("a",Rt,[s("String toString()"),t(a)]),s(" 返回此对象本身（它已经是一个字符串！）。")])]),n("tr",null,[zt,n("td",Ut,[n("a",Zt,[s("String toUpperCase()"),t(a)]),s(" 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。")])]),n("tr",null,[Xt,n("td",Gt,[n("a",Kt,[s("String toUpperCase(Locale locale)"),t(a)]),s(" 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。")])]),n("tr",null,[Qt,n("td",$t,[n("a",ne,[s("String trim()"),t(a)]),s(" 返回字符串的副本，忽略前导空白和尾部空白。")])]),n("tr",null,[se,n("td",ae,[n("a",te,[s("static String valueOf(primitive data type x)"),t(a)]),s(" 返回给定data type类型x参数的字符串表示形式。")])]),n("tr",null,[ee,n("td",le,[n("a",pe,[s("contains(CharSequence chars)"),t(a)]),s(" 判断是否包含指定的字符系列。")])]),n("tr",null,[oe,n("td",ie,[n("a",ce,[s("isEmpty()"),t(a)]),s(" 判断字符串是否为空。")])])])]),ue])}const ge=l(c,[["render",re],["__file","Java_note.html.vue"]]),he=JSON.parse(`{"path":"/posts/java_note/Java_note.html","title":"Java笔记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["笔记","计算机"],"tag":["java"],"description":"Java笔记 1.环境配置 ​ 先下载对应版本的jdk下载完后配置环境变量 ​ 环境变量配置过程： 配置java环境变量的方法：1、右键点击【计算机】，选择【属性】，点击【高级系统设置】，打开环境变量设置；2、新建【JAVA_HOME】变量，并编辑【Path】变量；3、新建【Classpath】变量并编辑即可。 1.首先右击【计算机】进入【属性】然后选...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/kdmvp_blog/posts/java_note/Java_note.html"}],["meta",{"property":"og:site_name","content":"kdmvp's\\tblog"}],["meta",{"property":"og:title","content":"Java笔记"}],["meta",{"property":"og:description","content":"Java笔记 1.环境配置 ​ 先下载对应版本的jdk下载完后配置环境变量 ​ 环境变量配置过程： 配置java环境变量的方法：1、右键点击【计算机】，选择【属性】，点击【高级系统设置】，打开环境变量设置；2、新建【JAVA_HOME】变量，并编辑【Path】变量；3、新建【Classpath】变量并编辑即可。 1.首先右击【计算机】进入【属性】然后选..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220222165502729.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T06:44:44.000Z"}],["meta",{"property":"article:author","content":"林伟强"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2024-04-18T06:44:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java笔记\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220222165502729.png\\",\\"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220222165641208.png\\",\\"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220222193013727.png\\",\\"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220301153218402.png\\"],\\"dateModified\\":\\"2024-04-18T06:44:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"林伟强\\"}]}"]]},"headers":[{"level":2,"title":"1.环境配置","slug":"_1-环境配置","link":"#_1-环境配置","children":[]},{"level":2,"title":"2.在记事本中写java程序","slug":"_2-在记事本中写java程序","link":"#_2-在记事本中写java程序","children":[]},{"level":2,"title":"3.使用eclipse写java程序","slug":"_3-使用eclipse写java程序","link":"#_3-使用eclipse写java程序","children":[]},{"level":2,"title":"4.基本语法","slug":"_4-基本语法","link":"#_4-基本语法","children":[]},{"level":2,"title":"5.基本数据类型","slug":"_5-基本数据类型","link":"#_5-基本数据类型","children":[]},{"level":2,"title":"6.变量类型","slug":"_6-变量类型","link":"#_6-变量类型","children":[{"level":3,"title":"局部变量","slug":"局部变量","link":"#局部变量","children":[]},{"level":3,"title":"实例变量","slug":"实例变量","link":"#实例变量","children":[]},{"level":3,"title":"类变量（静态变量）","slug":"类变量-静态变量","link":"#类变量-静态变量","children":[]}]},{"level":2,"title":"7.修饰符","slug":"_7-修饰符","link":"#_7-修饰符","children":[{"level":3,"title":"访问控制修饰符","slug":"访问控制修饰符","link":"#访问控制修饰符","children":[]},{"level":3,"title":"非访问修饰符","slug":"非访问修饰符","link":"#非访问修饰符","children":[]}]},{"level":2,"title":"8.运算符","slug":"_8-运算符","link":"#_8-运算符","children":[{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]}]},{"level":2,"title":"9.循环语句","slug":"_9-循环语句","link":"#_9-循环语句","children":[{"level":3,"title":"while循环","slug":"while循环","link":"#while循环","children":[]},{"level":3,"title":"do…while 循环","slug":"do-while-循环","link":"#do-while-循环","children":[]},{"level":3,"title":"for循环","slug":"for循环","link":"#for循环","children":[]},{"level":3,"title":"break 关键字","slug":"break-关键字","link":"#break-关键字","children":[]},{"level":3,"title":"continue 关键字","slug":"continue-关键字","link":"#continue-关键字","children":[]}]},{"level":2,"title":"10.条件语句","slug":"_10-条件语句","link":"#_10-条件语句","children":[]},{"level":2,"title":"11.switch case 语句","slug":"_11-switch-case-语句","link":"#_11-switch-case-语句","children":[]},{"level":2,"title":"12.Scanner 类（键盘输入）","slug":"_12-scanner-类-键盘输入","link":"#_12-scanner-类-键盘输入","children":[]},{"level":2,"title":"13.Number & Math 类方法","slug":"_13-number-math-类方法","link":"#_13-number-math-类方法","children":[]},{"level":2,"title":"14.Character 类","slug":"_14-character-类","link":"#_14-character-类","children":[{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]}]},{"level":2,"title":"15.转义字符","slug":"_15-转义字符","link":"#_15-转义字符","children":[]},{"level":2,"title":"16.String 类","slug":"_16-string-类","link":"#_16-string-类","children":[{"level":3,"title":"方法","slug":"方法-1","link":"#方法-1","children":[]}]},{"level":2,"title":"17.StringBuffer 和 StringBuilder 类","slug":"_17-stringbuffer-和-stringbuilder-类","link":"#_17-stringbuffer-和-stringbuilder-类","children":[{"level":3,"title":"方法","slug":"方法-2","link":"#方法-2","children":[]}]},{"level":2,"title":"18.数组","slug":"_18-数组","link":"#_18-数组","children":[{"level":3,"title":"Arrays 类","slug":"arrays-类","link":"#arrays-类","children":[]}]},{"level":2,"title":"19日期时间","slug":"_19日期时间","link":"#_19日期时间","children":[]},{"level":2,"title":"20.printf控制输出格式","slug":"_20-printf控制输出格式","link":"#_20-printf控制输出格式","children":[]},{"level":2,"title":"21.方法","slug":"_21-方法","link":"#_21-方法","children":[]},{"level":2,"title":"22.继承","slug":"_22-继承","link":"#_22-继承","children":[{"level":3,"title":"继承的特性","slug":"继承的特性","link":"#继承的特性","children":[]},{"level":3,"title":"继承关键字","slug":"继承关键字","link":"#继承关键字","children":[]}]},{"level":2,"title":"23.重写和重载","slug":"_23-重写和重载","link":"#_23-重写和重载","children":[{"level":3,"title":"重写","slug":"重写","link":"#重写","children":[]},{"level":3,"title":"重载","slug":"重载","link":"#重载","children":[]}]},{"level":2,"title":"24.接口","slug":"_24-接口","link":"#_24-接口","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]}]},{"level":2,"title":"25.异常处理","slug":"_25-异常处理","link":"#_25-异常处理","children":[]}],"git":{"createdTime":1713422684000,"updatedTime":1713422684000,"contributors":[{"name":"kdmvp-lin","email":"1561790129@qq.com","commits":1}]},"readingTime":{"minutes":38.82,"words":11645},"filePathRelative":"posts/java_note/Java_note.md","localizedDate":"2024年4月18日","excerpt":"\\n<h2>1.环境配置</h2>\\n<p>​\\t先下载对应版本的jdk下载完后配置环境变量</p>\\n<p>​\\t环境变量配置过程：</p>\\n<blockquote>\\n<p>配置java环境变量的方法：1、右键点击【计算机】，选择【属性】，点击【高级系统设置】，打开环境变量设置；2、新建【JAVA_HOME】变量，并编辑【Path】变量；3、新建【Classpath】变量并编辑即可。</p>\\n<p>1.首先右击【计算机】进入【属性】然后选择其中的【高级系统设置】。</p>\\n<p>2.点击进入【高级】中的【环境变量】，进入环境变量编辑界面。</p>\\n<p>3.在下方的【系统变量】中，并不存在JAVA_HOME变量,那么我们需要点击【新建】</p>\\n<p>4.变量名输入：JAVA_HOME 变量值指的是实际的安装路径（比如小编的路径为：C:\\\\Program Files\\\\Java\\\\jdk-9），最后点击确定。</p>\\n<p>5.Path变量设置同样是在【系统变量中】我们可以看到path变量已经存在，那么我们只需要点击【编辑】，进入path变量的编辑</p>\\n<p>6.变量名不变，变量值改为【%JAVA_HOME%\\\\bin;%JAVA_HOME%\\\\jre\\\\bin;】，最后点击确定。</p>\\n<p>7.Classpath变量设置同样的，在系统变量中也不存在Classpath变量。点击进入【新建】</p>\\n<p>8.变量名键入【Classpath】变量值键入【.;%JAVA_HOME%\\\\lib\\\\dt.jar;%JAVA_HOME%\\\\lib\\\\tools.jar; 】</p>\\n</blockquote>","autoDesc":true}`);export{ge as comp,he as data};
