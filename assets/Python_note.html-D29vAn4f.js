import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as i,a as n,b as s,d as a,g as e}from"./app-DD3KsC_x.js";const c={},r=e(`<h1 id="python笔记" tabindex="-1"><a class="header-anchor" href="#python笔记"><span>Python笔记</span></a></h1><h2 id="_1-python环境搭建" tabindex="-1"><a class="header-anchor" href="#_1-python环境搭建"><span>1.python环境搭建</span></a></h2><p>打开 WEB 浏览器访问 https://www.python.org/downloads/windows/ ，一般就下载 executable installer，x86 表示是 32 位机子的，x86-64 表示 64 位机子的。</p><p>在安装时记得勾选 <strong>Add Python 3.6 to PATH</strong>。否则电脑的环境变量就需要自己配置</p><p>安装完成后win+R 输入cmd回车后输入</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>python -V
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若出现python版本号就说明python安装成功了</p><p>在配置好环境后就可以编辑器中写程序</p><p>第一个程序：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;HelloWorld!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-基础语法" tabindex="-1"><a class="header-anchor" href="#_2-基础语法"><span>2.基础语法</span></a></h2><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3><p>​ Python中单行注释以 <strong>#</strong> 开头</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 第一个注释</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;Hello, Python!&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 第二个注释</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>多行注释可以用多个 <strong>#</strong> 号，还有 <strong>&#39;&#39;&#39;</strong> 和 <strong>&quot;&quot;&quot;</strong>：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#一行注释</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
	多行注释
	多行注释
&#39;&#39;&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="行与缩进" tabindex="-1"><a class="header-anchor" href="#行与缩进"><span>行与缩进</span></a></h3><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。如果在共一个代码块中缩进不同则会出现错误实例如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;Answer&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;True&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;Answer&quot;</span><span class="token punctuation">)</span>
  	<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;False&quot;</span><span class="token punctuation">)</span>    <span class="token comment"># 缩进不一致，会导致运行错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多行语句" tabindex="-1"><a class="header-anchor" href="#多行语句"><span>多行语句</span></a></h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 *<em>*</em> 来实现多行语句，例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#多行写法</span>
total <span class="token operator">=</span> item_one <span class="token operator">+</span> \\
        item_two <span class="token operator">+</span> \\
        item_three
<span class="token comment">#单行写法</span>
total <span class="token operator">=</span> item_one <span class="token operator">+</span> item_two <span class="token operator">+</span> item_three
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 ，例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;item_one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item_two&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item_three&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;item_four&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item_five&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string"><span>字符串(String)</span></a></h3><ul><li>Python 中单引号 <strong>&#39;</strong> 和双引号 <strong>&quot;</strong> 使用完全相同。</li><li>使用三引号(<strong>&#39;&#39;&#39;</strong> 或 <strong>&quot;&quot;&quot;</strong>)可以指定一个多行字符串。</li><li>转义符 ****。</li><li>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义。 如 <strong>r&quot;this is a line with \\n&quot;</strong> 则 <strong>\\n</strong> 会显示，并不是换行。</li><li>按字面意义级联字符串，如 <strong>&quot;this &quot; &quot;is &quot; &quot;string&quot;</strong> 会被自动转换为 <strong>this is string</strong>。</li><li>字符串可以用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</li><li>Python 中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li></ul><h3 id="数字-number-类型" tabindex="-1"><a class="header-anchor" href="#数字-number-类型"><span>数字(Number)类型</span></a></h3><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li><p><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p></li><li><p><strong>bool</strong> (布尔), 如 True。</p></li><li><p><strong>float</strong> (浮点数), 如 1.23、3E-2</p></li><li><p><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</p></li></ul><h2 id="_3-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据类型"><span>3.数据类型</span></a></h2><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>python中的变量不同于c或者java需要预先定义并且明确变量的类型</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的&quot;类型&quot;是变量所指的内存中对象的类型。</p><p>在c语言中定义一个变量</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">;</span>
bool flag<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在python中的变量只需要在定义时就确定了他的类型</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>counter <span class="token operator">=</span> <span class="token number">100</span>          <span class="token comment"># 整型变量</span>
miles   <span class="token operator">=</span> <span class="token number">1000.0</span>       <span class="token comment"># 浮点型变量</span>
name    <span class="token operator">=</span> <span class="token string">&quot;runoob&quot;</span>     <span class="token comment"># 字符串</span>
<span class="token comment">#为了确定以下我们定义的变量的类型输出一下</span>
counter <span class="token operator">=</span> <span class="token number">100</span>          <span class="token comment"># 整型变量</span>
miles <span class="token operator">=</span> <span class="token number">1000.0</span>       <span class="token comment"># 浮点型变量</span>
name <span class="token operator">=</span> <span class="token string">&quot;runoob&quot;</span>     <span class="token comment"># 字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;counter的类型：&#39;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;miles的类型：&#39;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>miles<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name的类型：&#39;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#输出内容</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>counter的类型<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>miles的类型<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;float&#39;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>name的类型<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python允许你同时为多个变量赋值</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。也可以为多个对象指定多个变量。例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#以下代码意思就是a=1 ,b=2, c=&quot;runoob&quot;</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;runoob&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>同时可以创建就可以删除，可以使用del来删除变量</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">del</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-数值运算" tabindex="-1"><a class="header-anchor" href="#_4-数值运算"><span>4.数值运算</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span>  <span class="token comment"># 加法</span>
<span class="token number">9</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4.3</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token comment"># 减法</span>
<span class="token number">2.3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span>  <span class="token comment"># 乘法</span>
<span class="token number">21</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">4</span>  <span class="token comment"># 除法，得到一个浮点数</span>
<span class="token number">0.5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">4</span> <span class="token comment"># 除法，得到一个整数</span>
<span class="token number">0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">17</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token comment"># 取余</span>
<span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">5</span> <span class="token comment"># 乘方</span>
<span class="token number">32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在混合运算时若同时出现整型或者浮点型，python都会转为浮点型</p></blockquote><h2 id="_5-字符运算" tabindex="-1"><a class="header-anchor" href="#_5-字符运算"><span>5.字符运算</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224151820070.png" alt="image-20220224151820070" tabindex="0" loading="lazy"><figcaption>image-20220224151820070</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;Runoob&#39;</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>          <span class="token comment"># 输出字符串</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 输出第一个到倒数第二个的所有字符</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 输出字符串第一个字符</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># 输出从第三个开始到第五个的字符</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 输出从第三个开始的后的所有字符</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment"># 输出字符串两次，也可以写成 print (2 * str)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">+</span> <span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 连接字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 使用反斜杠 *<em>*</em> 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 <strong>r</strong>，表示原始字符串：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Ru\\noob&#39;</span><span class="token punctuation">)</span>
Ru
oob
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;Ru\\noob&#39;</span><span class="token punctuation">)</span>
Ru\\noob
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = &#39;m&#39;会导致错误。</p><blockquote><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul></blockquote><h2 id="_6-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_6-数据类型转换"><span>6.数据类型转换</span></a></h2><h3 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换"><span>隐式类型转换</span></a></h3><p>在隐式类型转换中，Python 会自动将一种数据类型转换为另一种数据类型，不需要我们去干预。</p><p>例如：整型和浮点型进行转换时会自动转换成浮点型进行运算，就算结果可以是整型也会以浮点型的形式输出</p><p>但是数值类与字符类进行运算则会出错</p><p>例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#在这种情况下会对第三行报错</span>
a<span class="token operator">=</span><span class="token number">1</span>
b<span class="token operator">=</span><span class="token string">&#39;1&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显式类型转换" tabindex="-1"><a class="header-anchor" href="#显式类型转换"><span>显式类型转换</span></a></h3><p>在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。 我们使用 int()、float()、str() 等预定义函数来执行显式类型转换。</p><p><strong>int()</strong> 强制转换为整型：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># x 输出结果为 1</span>
y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2.8</span><span class="token punctuation">)</span> <span class="token comment"># 浮点转整型 y 输出结果为 2</span>
z <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 字符转整型 z 输出结果为 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>float()</strong> 强制转换为浮点型：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment"># x 输出结果为 1.0</span>
y <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">2.8</span><span class="token punctuation">)</span>   <span class="token comment"># y 输出结果为 2.8</span>
z <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span>   <span class="token comment"># z 输出结果为 3.0</span>
w <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;4.2&quot;</span><span class="token punctuation">)</span> <span class="token comment"># w 输出结果为 4.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>str()</strong> 强制转换为字符串类型：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">&quot;s1&quot;</span><span class="token punctuation">)</span> <span class="token comment"># x 输出结果为 &#39;s1&#39;</span>
y <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># y 输出结果为 &#39;2&#39;</span>
z <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span>  <span class="token comment"># z 输出结果为 &#39;3.0&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-推导式" tabindex="-1"><a class="header-anchor" href="#_7-推导式"><span>7.推导式</span></a></h2><h3 id="列表推导式" tabindex="-1"><a class="header-anchor" href="#列表推导式"><span>列表推导式</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[表达式 for 变量 in 列表] 
[out_exp_res for out_exp in input_list]

或者 

[表达式 for 变量 in 列表 if 条件]
[out_exp_res for out_exp in input_list if condition]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><p>过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;alice&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Wendy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Smith&#39;</span><span class="token punctuation">]</span>
<span class="token comment">#.upper将字符转为大写</span>
new_names <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_names<span class="token punctuation">)</span>

<span class="token comment">#输出</span>
<span class="token punctuation">[</span><span class="token string">&#39;ALICE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JERRY&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;WENDY&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SMITH&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典推导式" tabindex="-1"><a class="header-anchor" href="#字典推导式"><span>字典推导式</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{ key_expr: value_expr for value in collection }

或

{ key_expr: value_expr for value in collection if condition }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：使用字符串及其长度创建字典：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>listdemo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newdict <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> listdemo<span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newdict
<span class="token punctuation">{</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合推导式" tabindex="-1"><a class="header-anchor" href="#集合推导式"><span>集合推导式</span></a></h3><p>集合推导式基本格式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{ expression for item in Sequence }
或
{ expression for item in Sequence if conditional }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：计算数字 1,2,3 的平方数：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> setnew <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> setnew
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组推导式" tabindex="-1"><a class="header-anchor" href="#元组推导式"><span>元组推导式</span></a></h3><p>元组推导式基本格式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>(expression for item in Sequence )
或
(expression for item in Sequence if conditional )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，我们可以使用下面的代码生成一个包含数字 1~9 的元组：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> <span class="token operator">&lt;</span>genexpr<span class="token operator">&gt;</span> at <span class="token number">0x7faf6ee20a50</span><span class="token operator">&gt;</span>  <span class="token comment"># 返回的是生成器对象</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-运算符" tabindex="-1"><a class="header-anchor" href="#_8-运算符"><span>8.运算符</span></a></h2><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">加 - 两个对象相加</td><td style="text-align:left;">a + b 输出结果 31</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">减 - 得到负数或是一个数减去另一个数</td><td style="text-align:left;">a - b 输出结果 -11</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td style="text-align:left;">a * b 输出结果 210</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">除 - x 除以 y</td><td style="text-align:left;">b / a 输出结果 2.1</td></tr><tr><td style="text-align:left;">%</td><td style="text-align:left;">取模 - 返回除法的余数</td><td style="text-align:left;">b % a 输出结果 1</td></tr><tr><td style="text-align:left;">**</td><td style="text-align:left;">幂 - 返回x的y次幂</td><td style="text-align:left;">a**b 为10的21次方</td></tr><tr><td style="text-align:left;">//</td><td style="text-align:left;">取整除 - 向下取接近商的整数</td><td style="text-align:left;"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td></tr></tbody></table><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">等于 - 比较对象是否相等</td><td style="text-align:left;">(a == b) 返回 False。</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">不等于 - 比较两个对象是否不相等</td><td style="text-align:left;">(a != b) 返回 True。</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">大于 - 返回x是否大于y</td><td style="text-align:left;">(a &gt; b) 返回 False。</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td style="text-align:left;">(a &lt; b) 返回 True。</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">大于等于 - 返回x是否大于等于y。</td><td style="text-align:left;">(a &gt;= b) 返回 False。</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">小于等于 - 返回x是否小于等于y。</td><td style="text-align:left;">(a &lt;= b) 返回 True。</td></tr></tbody></table><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">=</td><td style="text-align:left;">简单的赋值运算符</td><td style="text-align:left;">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td style="text-align:left;">+=</td><td style="text-align:left;">加法赋值运算符</td><td style="text-align:left;">c += a 等效于 c = c + a</td></tr><tr><td style="text-align:left;">-=</td><td style="text-align:left;">减法赋值运算符</td><td style="text-align:left;">c -= a 等效于 c = c - a</td></tr><tr><td style="text-align:left;">*=</td><td style="text-align:left;">乘法赋值运算符</td><td style="text-align:left;">c *= a 等效于 c = c * a</td></tr><tr><td style="text-align:left;">/=</td><td style="text-align:left;">除法赋值运算符</td><td style="text-align:left;">c /= a 等效于 c = c / a</td></tr><tr><td style="text-align:left;">%=</td><td style="text-align:left;">取模赋值运算符</td><td style="text-align:left;">c %= a 等效于 c = c % a</td></tr><tr><td style="text-align:left;">**=</td><td style="text-align:left;">幂赋值运算符</td><td style="text-align:left;">c **= a 等效于 c = c ** a</td></tr><tr><td style="text-align:left;">//=</td><td style="text-align:left;">取整除赋值运算符</td><td style="text-align:left;">c //= a 等效于 c = c // a</td></tr><tr><td style="text-align:left;">:=</td><td style="text-align:left;">海象运算符，可在表达式内部为变量赋值。</td><td style="text-align:left;">在这个示例中，赋值表达式可以避免调用 len() 两次:<code>if (n := len(a)) &gt; 10: print(f&quot;List is too long ({n} elements, expected &lt;= 10)&quot;)</code></td></tr></tbody></table><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;</td><td style="text-align:left;">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td style="text-align:left;">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td style="text-align:left;">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">按位异或运算符：当两对应的二进位相异时，结果为1</td><td style="text-align:left;">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td style="text-align:left;">~</td><td style="text-align:left;">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。<strong>~x</strong> 类似于 <strong>-x-1</strong></td><td style="text-align:left;">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:left;">&lt;&lt;</td><td style="text-align:left;">左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。</td><td style="text-align:left;">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td style="text-align:left;">&gt;&gt;</td><td style="text-align:left;">右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数</td><td style="text-align:left;">a &gt;&gt; 2 输出结果 15 ，二进制</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">逻辑表达式</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">and</td><td style="text-align:left;">x and y</td><td style="text-align:left;">布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td style="text-align:left;">(a and b) 返回 20。</td></tr><tr><td style="text-align:left;">or</td><td style="text-align:left;">x or y</td><td style="text-align:left;">布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td style="text-align:left;">(a or b) 返回 10。</td></tr><tr><td style="text-align:left;">not</td><td style="text-align:left;">not x</td><td style="text-align:left;">布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td style="text-align:left;">not(a and b) 返回 False</td></tr></tbody></table><h3 id="成员运算符" tabindex="-1"><a class="header-anchor" href="#成员运算符"><span>成员运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">in</td><td style="text-align:left;">如果在指定的序列中找到值返回 True，否则返回 False。</td><td style="text-align:left;">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td style="text-align:left;">not in</td><td style="text-align:left;">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td style="text-align:left;">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h3 id="身份运算符" tabindex="-1"><a class="header-anchor" href="#身份运算符"><span>身份运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">is</td><td style="text-align:left;">is 是判断两个标识符是不是引用自一个对象</td><td style="text-align:left;"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td style="text-align:left;">is not</td><td style="text-align:left;">is not 是判断两个标识符是不是引用自不同对象</td><td style="text-align:left;"><strong>x is not y</strong> ， 类似 <strong>id(x) != id(y)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><h2 id="_9-转义字符" tabindex="-1"><a class="header-anchor" href="#_9-转义字符"><span>9.转义字符</span></a></h2><table><thead><tr><th style="text-align:left;">转义字符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">(在行尾时)</td><td style="text-align:left;">续行符</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;line1 \\ ... line2 \\ ... line3&quot;) line1 line2 line3 &gt;&gt;&gt; </code></td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">反斜杠符号</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;\\\\&quot;) \\</code></td></tr><tr><td style="text-align:left;">&#39;</td><td style="text-align:left;">单引号</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&#39;\\&#39;&#39;) &#39;</code></td></tr><tr><td style="text-align:left;">&quot;</td><td style="text-align:left;">双引号</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;\\&quot;&quot;) &quot;</code></td></tr><tr><td style="text-align:left;">\\a</td><td style="text-align:left;">响铃</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;\\a&quot;)</code>执行后电脑有响声。</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">退格(Backspace)</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;Hello \\b World!&quot;) Hello World!</code></td></tr><tr><td style="text-align:left;">\\000</td><td style="text-align:left;">空</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;\\000&quot;) &gt;&gt;&gt; </code></td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">换行</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;\\n&quot;) &gt;&gt;&gt;</code></td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">纵向制表符</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;Hello \\v World!&quot;) Hello World! &gt;&gt;&gt;</code></td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">横向制表符</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;Hello \\t World!&quot;) Hello World! &gt;&gt;&gt;</code></td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">回车，将 <strong>\\r</strong> 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 <strong>\\r</strong> 后面的内容完全替换完成。</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;Hello\\rWorld!&quot;) World! &gt;&gt;&gt; print(&#39;google runoob taobao\\r123456&#39;) 123456 runoob taobao</code></td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">换页</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;Hello \\f World!&quot;) Hello World! &gt;&gt;&gt; </code></td></tr><tr><td style="text-align:left;">\\yyy</td><td style="text-align:left;">八进制数，y 代表 0~7 的字符，例如：\\012 代表换行。</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41&quot;) Hello World!</code></td></tr><tr><td style="text-align:left;">\\xyy</td><td style="text-align:left;">十六进制数，以 \\x 开头，y 代表的字符，例如：\\x0a 代表换行</td><td style="text-align:left;"><code>&gt;&gt;&gt; print(&quot;\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21&quot;) Hello World!</code></td></tr><tr><td style="text-align:left;">\\other</td><td style="text-align:left;">其它的字符以普通格式输出</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="_10-列表" tabindex="-1"><a class="header-anchor" href="#_10-列表"><span>10.列表</span></a></h2><p>序列是 Python 中最基本的数据结构。</p><p>序列中的每个值都有对应的位置值，称之为索引，第一个索引是 0，第二个索引是 1，依此类推。</p><p>列表的数据项不需要具有相同的类型</p><p>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>
list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span>
list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span>
list4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224155753863.png" alt="image-20220224155753863" tabindex="0" loading="lazy"><figcaption>image-20220224155753863</figcaption></figure><h3 id="嵌套列表" tabindex="-1"><a class="header-anchor" href="#嵌套列表"><span>嵌套列表</span></a></h3><p>使用嵌套列表即在列表里创建其它列表，例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> n<span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token string">&#39;b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表函数-方法" tabindex="-1"><a class="header-anchor" href="#列表函数-方法"><span>列表函数&amp;方法</span></a></h3>`,118),d=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"序号"),n("th",{style:{"text-align":"left"}},"函数")])],-1),u=n("td",{style:{"text-align":"left"}},"1",-1),k={style:{"text-align":"left"}},g={href:"https://www.runoob.com/python3/python3-att-list-len.html",target:"_blank",rel:"noopener noreferrer"},m=n("td",{style:{"text-align":"left"}},"2",-1),v={style:{"text-align":"left"}},b={href:"https://www.runoob.com/python3/python3-att-list-max.html",target:"_blank",rel:"noopener noreferrer"},h=n("td",{style:{"text-align":"left"}},"3",-1),y={style:{"text-align":"left"}},x={href:"https://www.runoob.com/python3/python3-att-list-min.html",target:"_blank",rel:"noopener noreferrer"},f=n("td",{style:{"text-align":"left"}},"4",-1),_={style:{"text-align":"left"}},w={href:"https://www.runoob.com/python3/python3-att-list-list.html",target:"_blank",rel:"noopener noreferrer"},q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"序号"),n("th",{style:{"text-align":"left"}},"方法")])],-1),P=n("td",{style:{"text-align":"left"}},"1",-1),T={style:{"text-align":"left"}},A={href:"https://www.runoob.com/python3/python3-att-list-append.html",target:"_blank",rel:"noopener noreferrer"},j=n("td",{style:{"text-align":"left"}},"2",-1),N={style:{"text-align":"left"}},R={href:"https://www.runoob.com/python3/python3-att-list-count.html",target:"_blank",rel:"noopener noreferrer"},W=n("td",{style:{"text-align":"left"}},"3",-1),F={style:{"text-align":"left"}},H={href:"https://www.runoob.com/python3/python3-att-list-extend.html",target:"_blank",rel:"noopener noreferrer"},z=n("td",{style:{"text-align":"left"}},"4",-1),S={style:{"text-align":"left"}},I={href:"https://www.runoob.com/python3/python3-att-list-index.html",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"left"}},"5",-1),E={style:{"text-align":"left"}},B={href:"https://www.runoob.com/python3/python3-att-list-insert.html",target:"_blank",rel:"noopener noreferrer"},C=n("td",{style:{"text-align":"left"}},"6",-1),M={style:{"text-align":"left"}},L={href:"https://www.runoob.com/python3/python3-att-list-pop.html",target:"_blank",rel:"noopener noreferrer"},G=n("td",{style:{"text-align":"left"}},"7",-1),V={style:{"text-align":"left"}},J={href:"https://www.runoob.com/python3/python3-att-list-remove.html",target:"_blank",rel:"noopener noreferrer"},Z=n("td",{style:{"text-align":"left"}},"8",-1),Q={style:{"text-align":"left"}},Y={href:"https://www.runoob.com/python3/python3-att-list-reverse.html",target:"_blank",rel:"noopener noreferrer"},O=n("td",{style:{"text-align":"left"}},"9",-1),K={style:{"text-align":"left"}},U={href:"https://www.runoob.com/python3/python3-att-list-sort.html",target:"_blank",rel:"noopener noreferrer"},X=n("td",{style:{"text-align":"left"}},"10",-1),$={style:{"text-align":"left"}},nn={href:"https://www.runoob.com/python3/python3-att-list-clear.html",target:"_blank",rel:"noopener noreferrer"},sn=n("td",{style:{"text-align":"left"}},"11",-1),tn={style:{"text-align":"left"}},an={href:"https://www.runoob.com/python3/python3-att-list-copy.html",target:"_blank",rel:"noopener noreferrer"},en=e(`<h2 id="_11-元组" tabindex="-1"><a class="header-anchor" href="#_11-元组"><span>11.元组</span></a></h2><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tup3 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span>   <span class="token comment">#  不需要括号也可以</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup3<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-字典" tabindex="-1"><a class="header-anchor" href="#_12-字典"><span>12.字典</span></a></h2><p>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值 <strong>key=&gt;value</strong> 对用冒号 <strong>:</strong> 分割，每个对之间用逗号(<strong>,</strong>)分割，整个字典包括在花括号 <strong>{}</strong> 中 ,格式如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span>key1 <span class="token punctuation">:</span> value1<span class="token punctuation">,</span> key2 <span class="token punctuation">:</span> value2<span class="token punctuation">,</span> key3 <span class="token punctuation">:</span> value3 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224160134641.png" alt="image-20220224160134641" tabindex="0" loading="lazy"><figcaption>image-20220224160134641</figcaption></figure><p>键必须是唯一的，但值则不必。</p><p>例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;likes&#39;</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;www.runoob.com&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建空字典" tabindex="-1"><a class="header-anchor" href="#创建空字典"><span>创建空字典</span></a></h3><p>​ 使用大括号 <strong>{ }</strong> 创建空字典：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 使用大括号 {} 来创建空字典</span>
emptyDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment"># 打印字典</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>emptyDict<span class="token punctuation">)</span>
 
<span class="token comment"># 查看字典的数量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Length:&quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>emptyDict<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token comment"># 查看类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>emptyDict<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 使用内建函数 <strong>dict()</strong> 创建字典：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>emptyDict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 
<span class="token comment"># 打印字典</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>emptyDict<span class="token punctuation">)</span>
 
<span class="token comment"># 查看字典的数量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Length:&quot;</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>emptyDict<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token comment"># 查看类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>emptyDict<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问字典里的值" tabindex="-1"><a class="header-anchor" href="#访问字典里的值"><span>访问字典里的值</span></a></h3><p>把相应的键放入到方括号中，如下实例:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;Class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;First&#39;</span><span class="token punctuation">}</span>
 
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;tinydict[&#39;Name&#39;]: &quot;</span><span class="token punctuation">,</span> tinydict<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;tinydict[&#39;Age&#39;]: &quot;</span><span class="token punctuation">,</span> tinydict<span class="token punctuation">[</span><span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改字典" tabindex="-1"><a class="header-anchor" href="#修改字典"><span>修改字典</span></a></h3><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;Class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;First&#39;</span><span class="token punctuation">}</span>
 
tinydict<span class="token punctuation">[</span><span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>               <span class="token comment"># 更新 Age</span>
tinydict<span class="token punctuation">[</span><span class="token string">&#39;School&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;菜鸟教程&quot;</span>  <span class="token comment"># 添加信息</span>
 
 
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;tinydict[&#39;Age&#39;]: &quot;</span><span class="token punctuation">,</span> tinydict<span class="token punctuation">[</span><span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;tinydict[&#39;School&#39;]: &quot;</span><span class="token punctuation">,</span> tinydict<span class="token punctuation">[</span><span class="token string">&#39;School&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-集合" tabindex="-1"><a class="header-anchor" href="#_13-集合"><span>13.集合</span></a></h2><p>集合（set）是一个无序的不重复元素序列。</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><p>创建格式：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> basket <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pear&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span>                      <span class="token comment"># 这里演示的是去重功能</span>
<span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pear&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;orange&#39;</span> <span class="token keyword">in</span> basket                 <span class="token comment"># 快速判断元素是否在集合内</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;crabgrass&#39;</span> <span class="token keyword">in</span> basket
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-输入和输出" tabindex="-1"><a class="header-anchor" href="#_14-输入和输出"><span>14.输入和输出</span></a></h2><h3 id="读取键盘输入" tabindex="-1"><a class="header-anchor" href="#读取键盘输入"><span>读取键盘输入</span></a></h3><p>​ input()</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#键盘输入什么就输出什么</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;你输入的内容是: &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h3><p>print()</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;输出 &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="读和写文件" tabindex="-1"><a class="header-anchor" href="#读和写文件"><span>读和写文件</span></a></h3><p>open() 将会返回一个 file 对象，基本语法格式如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>open(filename, mode)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><ul><li>filename：包含了你要访问的文件名称的字符串值。</li><li>mode：决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li></ul></blockquote><p>mode:</p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">r</td><td style="text-align:left;">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:left;">rb</td><td style="text-align:left;">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:left;">r+</td><td style="text-align:left;">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:left;">rb+</td><td style="text-align:left;">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:left;">w</td><td style="text-align:left;">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left;">wb</td><td style="text-align:left;">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left;">w+</td><td style="text-align:left;">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left;">wb+</td><td style="text-align:left;">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left;">ab</td><td style="text-align:left;">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left;">a+</td><td style="text-align:left;">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td style="text-align:left;">ab+</td><td style="text-align:left;">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h3 id="文件对象的方法" tabindex="-1"><a class="header-anchor" href="#文件对象的方法"><span>文件对象的方法</span></a></h3><p>f.read()</p><p>为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。</p><p>size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。</p><p>以下实例假定文件 foo.txt 已存在（上面实例中已创建）：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 打开一个文件</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/foo.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
<span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
<span class="token comment"># 关闭打开的文件</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>f.readline()</p><p>f.readline() 会从文件中读取单独的一行。换行符为 &#39;\\n&#39;。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 打开一个文件</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/foo.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>

<span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>

<span class="token comment"># 关闭打开的文件</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>f.readlines()</p><p>f.readlines() 将返回该文件中包含的所有行。</p><p>如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 打开一个文件</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/foo.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>

<span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>

<span class="token comment"># 关闭打开的文件</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>f.write()</p><p>f.write(string) 将 string 写入到文件中, 然后返回写入的字符数。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 打开一个文件
f = open(&quot;/tmp/foo.txt&quot;, &quot;w&quot;)

num = f.write( &quot;Python 是一个非常好的语言。\\n是的，的确非常好!!\\n&quot; )
print(num)
# 关闭打开的文件
f.close()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-条件语句" tabindex="-1"><a class="header-anchor" href="#_15-条件语句"><span>15.条件语句</span></a></h2><p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。</p><p>可以通过下图来简单了解条件语句的执行过程:</p><h3 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span>if 语句</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> condition_1<span class="token punctuation">:</span>
    statement_block_1
<span class="token keyword">elif</span> condition_2<span class="token punctuation">:</span>
    statement_block_2
<span class="token keyword">else</span><span class="token punctuation">:</span>
    statement_block_3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-嵌套" tabindex="-1"><a class="header-anchor" href="#if-嵌套"><span>if 嵌套</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> 表达式<span class="token number">1</span><span class="token punctuation">:</span>
    语句
    <span class="token keyword">if</span> 表达式<span class="token number">2</span><span class="token punctuation">:</span>
        语句
    <span class="token keyword">elif</span> 表达式<span class="token number">3</span><span class="token punctuation">:</span>
        语句
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        语句
<span class="token keyword">elif</span> 表达式<span class="token number">4</span><span class="token punctuation">:</span>
    语句
<span class="token keyword">else</span><span class="token punctuation">:</span>
    语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-循环语句" tabindex="-1"><a class="header-anchor" href="#_16-循环语句"><span>16.循环语句</span></a></h2><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>while 判断条件(condition)：
    执行语句(statements)……
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#1 到 100 之和为: 5050</span>
n <span class="token operator">=</span> <span class="token number">100</span>
<span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
counter <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> counter <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> counter
    counter <span class="token operator">+=</span> <span class="token number">1</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;1 到 %d 之和为: %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-循环使用-else-语句" tabindex="-1"><a class="header-anchor" href="#while-循环使用-else-语句"><span>while 循环使用 else 语句</span></a></h3><p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>while &lt;expr&gt;:
    &lt;statement(s)&gt;
else:
    &lt;additional_statement(s)&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">&quot; 小于 5&quot;</span><span class="token punctuation">)</span>
   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">&quot; 大于或等于 5&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-语句" tabindex="-1"><a class="header-anchor" href="#for-语句"><span>for 语句</span></a></h3><p>Python for 循环可以遍历任何可迭代对象，如一个列表或者一个字符串。</p><p>for循环的一般格式如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>for &lt;variable&gt; in &lt;sequence&gt;:
    &lt;statements&gt;
else:
    &lt;statements&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环列表" tabindex="-1"><a class="header-anchor" href="#循环列表"><span>循环列表：</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#依次输出列表中的元素</span>
languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Perl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">]</span> 
<span class="token keyword">for</span> x <span class="token keyword">in</span> languages<span class="token punctuation">:</span>
     <span class="token keyword">print</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for 实例中使用了 break 语句，break 语句用于跳出当前循环体：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Baidu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Taobao&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> site <span class="token keyword">in</span> sites<span class="token punctuation">:</span>
    <span class="token keyword">if</span> site <span class="token operator">==</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;菜鸟教程!&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;循环数据 &quot;</span> <span class="token operator">+</span> site<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;没有循环数据!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;完成循环!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="range-函数" tabindex="-1"><a class="header-anchor" href="#range-函数"><span>range()函数</span></a></h4><p>如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment">#输出0,1，2，3，4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用range指定区间的值：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment">#输出5,6,7,8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做&#39;步长&#39;):</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment">#输出0,3,6,9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以结合range()和len()函数以遍历一个序列的索引,如下所示:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Baidu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Taobao&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;QQ&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pass-语句" tabindex="-1"><a class="header-anchor" href="#pass-语句"><span>pass 语句</span></a></h3><p>pass是空语句，是为了保持程序结构的完整性。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
     <span class="token keyword">pass</span>  <span class="token comment"># 等待键盘中断 (Ctrl+C)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-函数" tabindex="-1"><a class="header-anchor" href="#_17-函数"><span>17.函数</span></a></h2><h3 id="定义一个函数" tabindex="-1"><a class="header-anchor" href="#定义一个函数"><span>定义一个函数</span></a></h3><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号 <strong>:</strong> 起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224162817952.png" alt="image-20220224162817952" tabindex="0" loading="lazy"><figcaption>image-20220224162817952</figcaption></figure><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>def 函数名（参数列表）:
    函数体
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#函数部分</span>
<span class="token keyword">def</span> <span class="token function">PrintName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;这是个名字函数&#39;</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>
<span class="token comment">#程序主体</span>
name1<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
PrintName<span class="token punctuation">(</span>name1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#函数部分</span>
<span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> num1<span class="token operator">&gt;</span>num2<span class="token punctuation">:</span>
        <span class="token keyword">return</span> num1
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num2
<span class="token comment">#程序主体</span>
a<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
b<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-数据结构" tabindex="-1"><a class="header-anchor" href="#_18-数据结构"><span>18.数据结构</span></a></h2><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">list.append(x)</td><td style="text-align:left;">把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]。</td></tr><tr><td style="text-align:left;">list.extend(L)</td><td style="text-align:left;">通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] = L。</td></tr><tr><td style="text-align:left;">list.insert(i, x)</td><td style="text-align:left;">在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td></tr><tr><td style="text-align:left;">list.remove(x)</td><td style="text-align:left;">删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。</td></tr><tr><td style="text-align:left;">list.pop([i])</td><td style="text-align:left;">从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被移除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）</td></tr><tr><td style="text-align:left;">list.clear()</td><td style="text-align:left;">移除列表中的所有项，等于del a[:]。</td></tr><tr><td style="text-align:left;">list.index(x)</td><td style="text-align:left;">返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。</td></tr><tr><td style="text-align:left;">list.count(x)</td><td style="text-align:left;">返回 x 在列表中出现的次数。</td></tr><tr><td style="text-align:left;">list.sort()</td><td style="text-align:left;">对列表中的元素进行排序。</td></tr><tr><td style="text-align:left;">list.reverse()</td><td style="text-align:left;">倒排列表中的元素。</td></tr><tr><td style="text-align:left;">list.copy()</td><td style="text-align:left;">返回列表的浅复制，等于a[:]。</td></tr></tbody></table><h2 id="_19-模块" tabindex="-1"><a class="header-anchor" href="#_19-模块"><span>19.模块</span></a></h2><p>如果你从 Python 解释器退出再进入，那么你定义的所有的方法和变量就都消失了。</p><p>为此 Python 提供了一个办法，把这些定义存放在文件中，为一些脚本或者交互式的解释器实例使用，这个文件被称为模块。</p><p>模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</p><p>下面是一个使用 python 标准库中模块的例子。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;命令行参数如下:&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">:</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n\\nPython 路径为：&#39;</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_20-pip" tabindex="-1"><a class="header-anchor" href="#_20-pip"><span>20.pip</span></a></h2><p>pip 是 Python 包管理工具，该工具提供了对 Python 包的查找、下载、安装、卸载的功能。</p><p>这是在终端中执行的命令</p><p>查看是否已经安装 pip 可以使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>载安装包使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip install some-package-name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如我们安装 numpy 包：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip install numpy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以轻易地通过以下的命令来移除软件包：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip uninstall some-package-name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如我们移除 numpy 包：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip uninstall numpy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要查看我们已经安装的软件包，可以使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,126);function ln(pn,on){const t=p("ExternalLinkIcon");return o(),i("div",null,[r,n("table",null,[d,n("tbody",null,[n("tr",null,[u,n("td",k,[n("a",g,[s("len(list)"),a(t)]),s(" 列表元素个数")])]),n("tr",null,[m,n("td",v,[n("a",b,[s("max(list)"),a(t)]),s(" 返回列表元素最大值")])]),n("tr",null,[h,n("td",y,[n("a",x,[s("min(list)"),a(t)]),s(" 返回列表元素最小值")])]),n("tr",null,[f,n("td",_,[n("a",w,[s("list(seq)"),a(t)]),s(" 将元组转换为列表")])])])]),n("table",null,[q,n("tbody",null,[n("tr",null,[P,n("td",T,[n("a",A,[s("list.append(obj)"),a(t)]),s(" 在列表末尾添加新的对象")])]),n("tr",null,[j,n("td",N,[n("a",R,[s("list.count(obj)"),a(t)]),s(" 统计某个元素在列表中出现的次数")])]),n("tr",null,[W,n("td",F,[n("a",H,[s("list.extend(seq)"),a(t)]),s(" 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）")])]),n("tr",null,[z,n("td",S,[n("a",I,[s("list.index(obj)"),a(t)]),s(" 从列表中找出某个值第一个匹配项的索引位置")])]),n("tr",null,[D,n("td",E,[n("a",B,[s("list.insert(index, obj)"),a(t)]),s(" 将对象插入列表")])]),n("tr",null,[C,n("td",M,[s("[list.pop("),n("a",L,[s("index=-1])"),a(t)]),s(" 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值")])]),n("tr",null,[G,n("td",V,[n("a",J,[s("list.remove(obj)"),a(t)]),s(" 移除列表中某个值的第一个匹配项")])]),n("tr",null,[Z,n("td",Q,[n("a",Y,[s("list.reverse()"),a(t)]),s(" 反向列表中元素")])]),n("tr",null,[O,n("td",K,[n("a",U,[s("list.sort( key=None, reverse=False)"),a(t)]),s(" 对原列表进行排序")])]),n("tr",null,[X,n("td",$,[n("a",nn,[s("list.clear()"),a(t)]),s(" 清空列表")])]),n("tr",null,[sn,n("td",tn,[n("a",an,[s("list.copy()"),a(t)]),s(" 复制列表")])])])]),en])}const dn=l(c,[["render",ln],["__file","Python_note.html.vue"]]),un=JSON.parse(`{"path":"/posts/python/Python_note.html","title":"Python笔记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["笔记","计算机"],"tag":["python"],"description":"Python笔记 1.python环境搭建 打开 WEB 浏览器访问 https://www.python.org/downloads/windows/ ，一般就下载 executable installer，x86 表示是 32 位机子的，x86-64 表示 64 位机子的。 在安装时记得勾选 Add Python 3.6 to PATH。否则电脑的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/kdmvp_blog/posts/python/Python_note.html"}],["meta",{"property":"og:site_name","content":"kdmvp's\\tblog"}],["meta",{"property":"og:title","content":"Python笔记"}],["meta",{"property":"og:description","content":"Python笔记 1.python环境搭建 打开 WEB 浏览器访问 https://www.python.org/downloads/windows/ ，一般就下载 executable installer，x86 表示是 32 位机子的，x86-64 表示 64 位机子的。 在安装时记得勾选 Add Python 3.6 to PATH。否则电脑的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224151820070.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T06:44:44.000Z"}],["meta",{"property":"article:author","content":"林伟强"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2024-04-18T06:44:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python笔记\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224151820070.png\\",\\"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224155753863.png\\",\\"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224160134641.png\\",\\"https://cdn.jsdelivr.net/gh/kdmvp-lin/MarkdownImg/image-20220224162817952.png\\"],\\"dateModified\\":\\"2024-04-18T06:44:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"林伟强\\"}]}"]]},"headers":[{"level":2,"title":"1.python环境搭建","slug":"_1-python环境搭建","link":"#_1-python环境搭建","children":[]},{"level":2,"title":"2.基础语法","slug":"_2-基础语法","link":"#_2-基础语法","children":[{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":3,"title":"行与缩进","slug":"行与缩进","link":"#行与缩进","children":[]},{"level":3,"title":"多行语句","slug":"多行语句","link":"#多行语句","children":[]},{"level":3,"title":"字符串(String)","slug":"字符串-string","link":"#字符串-string","children":[]},{"level":3,"title":"数字(Number)类型","slug":"数字-number-类型","link":"#数字-number-类型","children":[]}]},{"level":2,"title":"3.数据类型","slug":"_3-数据类型","link":"#_3-数据类型","children":[]},{"level":2,"title":"4.数值运算","slug":"_4-数值运算","link":"#_4-数值运算","children":[]},{"level":2,"title":"5.字符运算","slug":"_5-字符运算","link":"#_5-字符运算","children":[]},{"level":2,"title":"6.数据类型转换","slug":"_6-数据类型转换","link":"#_6-数据类型转换","children":[{"level":3,"title":"隐式类型转换","slug":"隐式类型转换","link":"#隐式类型转换","children":[]},{"level":3,"title":"显式类型转换","slug":"显式类型转换","link":"#显式类型转换","children":[]}]},{"level":2,"title":"7.推导式","slug":"_7-推导式","link":"#_7-推导式","children":[{"level":3,"title":"列表推导式","slug":"列表推导式","link":"#列表推导式","children":[]},{"level":3,"title":"字典推导式","slug":"字典推导式","link":"#字典推导式","children":[]},{"level":3,"title":"集合推导式","slug":"集合推导式","link":"#集合推导式","children":[]},{"level":3,"title":"元组推导式","slug":"元组推导式","link":"#元组推导式","children":[]}]},{"level":2,"title":"8.运算符","slug":"_8-运算符","link":"#_8-运算符","children":[{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"成员运算符","slug":"成员运算符","link":"#成员运算符","children":[]},{"level":3,"title":"身份运算符","slug":"身份运算符","link":"#身份运算符","children":[]}]},{"level":2,"title":"9.转义字符","slug":"_9-转义字符","link":"#_9-转义字符","children":[]},{"level":2,"title":"10.列表","slug":"_10-列表","link":"#_10-列表","children":[{"level":3,"title":"嵌套列表","slug":"嵌套列表","link":"#嵌套列表","children":[]},{"level":3,"title":"列表函数&方法","slug":"列表函数-方法","link":"#列表函数-方法","children":[]}]},{"level":2,"title":"11.元组","slug":"_11-元组","link":"#_11-元组","children":[]},{"level":2,"title":"12.字典","slug":"_12-字典","link":"#_12-字典","children":[{"level":3,"title":"创建空字典","slug":"创建空字典","link":"#创建空字典","children":[]},{"level":3,"title":"访问字典里的值","slug":"访问字典里的值","link":"#访问字典里的值","children":[]},{"level":3,"title":"修改字典","slug":"修改字典","link":"#修改字典","children":[]}]},{"level":2,"title":"13.集合","slug":"_13-集合","link":"#_13-集合","children":[]},{"level":2,"title":"14.输入和输出","slug":"_14-输入和输出","link":"#_14-输入和输出","children":[{"level":3,"title":"读取键盘输入","slug":"读取键盘输入","link":"#读取键盘输入","children":[]},{"level":3,"title":"输出","slug":"输出","link":"#输出","children":[]},{"level":3,"title":"读和写文件","slug":"读和写文件","link":"#读和写文件","children":[]},{"level":3,"title":"文件对象的方法","slug":"文件对象的方法","link":"#文件对象的方法","children":[]}]},{"level":2,"title":"15.条件语句","slug":"_15-条件语句","link":"#_15-条件语句","children":[{"level":3,"title":"if 语句","slug":"if-语句","link":"#if-语句","children":[]},{"level":3,"title":"if 嵌套","slug":"if-嵌套","link":"#if-嵌套","children":[]}]},{"level":2,"title":"16.循环语句","slug":"_16-循环语句","link":"#_16-循环语句","children":[{"level":3,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":3,"title":"while 循环使用 else 语句","slug":"while-循环使用-else-语句","link":"#while-循环使用-else-语句","children":[]},{"level":3,"title":"for 语句","slug":"for-语句","link":"#for-语句","children":[]},{"level":3,"title":"pass 语句","slug":"pass-语句","link":"#pass-语句","children":[]}]},{"level":2,"title":"17.函数","slug":"_17-函数","link":"#_17-函数","children":[{"level":3,"title":"定义一个函数","slug":"定义一个函数","link":"#定义一个函数","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]}]},{"level":2,"title":"18.数据结构","slug":"_18-数据结构","link":"#_18-数据结构","children":[]},{"level":2,"title":"19.模块","slug":"_19-模块","link":"#_19-模块","children":[]},{"level":2,"title":"20.pip","slug":"_20-pip","link":"#_20-pip","children":[]}],"git":{"createdTime":1713422684000,"updatedTime":1713422684000,"contributors":[{"name":"kdmvp-lin","email":"1561790129@qq.com","commits":1}]},"readingTime":{"minutes":23.38,"words":7013},"filePathRelative":"posts/python/Python_note.md","localizedDate":"2024年4月18日","excerpt":"\\n<h2>1.python环境搭建</h2>\\n<p>打开 WEB 浏览器访问 https://www.python.org/downloads/windows/ ，一般就下载 executable installer，x86 表示是 32 位机子的，x86-64 表示 64 位机子的。</p>\\n<p>在安装时记得勾选 <strong>Add Python 3.6 to PATH</strong>。否则电脑的环境变量就需要自己配置</p>\\n<p>安装完成后win+R 输入cmd回车后输入</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>python -V\\n</code></pre></div>","autoDesc":true}`);export{dn as comp,un as data};
