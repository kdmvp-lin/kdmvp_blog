import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as a}from"./app-Co1PqJYe.js";const t={},i=a(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1.简介</span></a></h2><p>Docker 是一个应用打包、分发、部署的工具，可以虚拟软件运行的环境</p><p><strong>打包</strong>：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包<br><strong>分发</strong>：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装<br><strong>部署</strong>：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Windows/Mac/Linux。</p><h3 id="_1-1优点" tabindex="-1"><a class="header-anchor" href="#_1-1优点"><span>1.1优点</span></a></h3><h4 id="_1-1-1相对于虚拟机优势" tabindex="-1"><a class="header-anchor" href="#_1-1-1相对于虚拟机优势"><span>1.1.1相对于虚拟机优势</span></a></h4><table><thead><tr><th>特性</th><th>普通虚拟机</th><th>Docker</th></tr></thead><tbody><tr><td>跨平台</td><td>通常只能在桌面级系统运行，例如 Windows/Mac，无法在不带图形界面的服务器上运行</td><td>支持的系统非常多，各类 windows 和 Linux 都支持</td></tr><tr><td>性能</td><td>性能损耗大，内存占用高，因为是把整个完整系统都虚拟出来了</td><td>性能好，只虚拟软件所需运行环境，最大化减少没用的配置</td></tr><tr><td>自动化</td><td>需要手动安装所有东西</td><td>一个命令就可以自动部署好所需环境</td></tr><tr><td>稳定性</td><td>稳定性不高，不同系统差异大</td><td>稳定性好，不同系统都一样部署方式</td></tr></tbody></table><h4 id="_1-1-2部署优势" tabindex="-1"><a class="header-anchor" href="#_1-1-2部署优势"><span>1.1.2部署优势</span></a></h4><ul><li><p>可以在windows上开发，部署到linux上</p></li><li><p>部署方式简单只需要一个命令</p></li><li><p>保证在不同设备和系统上运行环境一致</p></li><li><p>可以让软件多个版本共存且不污染环境</p></li><li><p>占用内存极小</p></li></ul><h3 id="_1-2重要概念" tabindex="-1"><a class="header-anchor" href="#_1-2重要概念"><span>1.2重要概念</span></a></h3><h4 id="_1-2-1镜像" tabindex="-1"><a class="header-anchor" href="#_1-2-1镜像"><span>1.2.1镜像</span></a></h4><p>可以理解为软件安装包，可以方便的进行传播和安装。</p><h4 id="_1-2-2容器" tabindex="-1"><a class="header-anchor" href="#_1-2-2容器"><span>1.2.2容器</span></a></h4><p>软件安装后的状态，每个软件运行环境都是独立的、隔离的，称之为容器。</p><h3 id="_1-3镜像加速源" tabindex="-1"><a class="header-anchor" href="#_1-3镜像加速源"><span>1.3镜像加速源</span></a></h3><table><thead><tr><th>镜像加速器</th><th>镜像加速器地址</th></tr></thead><tbody><tr><td>Docker 中国官方镜像</td><td>https://registry.docker-cn.com</td></tr><tr><td>DaoCloud 镜像站</td><td>http://f1361db2.m.daocloud.io</td></tr><tr><td>Azure 中国镜像</td><td>https://dockerhub.azk8s.cn</td></tr><tr><td>科大镜像站</td><td>https://docker.mirrors.ustc.edu.cn</td></tr><tr><td>阿里云</td><td>https://&lt;your_code&gt;.mirror.aliyuncs.com</td></tr><tr><td>七牛云</td><td>https://reg-mirror.qiniu.com</td></tr><tr><td>网易云</td><td>https://hub-mirror.c.163.com</td></tr><tr><td>腾讯云</td><td>https://mirror.ccs.tencentyun.com</td></tr></tbody></table><h2 id="_2-docker快速安装软件" tabindex="-1"><a class="header-anchor" href="#_2-docker快速安装软件"><span>2.Docker快速安装软件</span></a></h2><h3 id="_2-1流程" tabindex="-1"><a class="header-anchor" href="#_2-1流程"><span>2.1流程</span></a></h3><p>去docker网站先找到自己想要的镜像https://hub.docker.com/</p><ol><li>拉取镜像</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker pull

例：
docker pull centos(可以去docker)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建容器(运行镜像)</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run

例：
docker run -d -p 6379:6379 --name redis redis:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>发布镜像</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker push

例： 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-dockerfile" tabindex="-1"><a class="header-anchor" href="#_3-dockerfile"><span>3.DockerFile</span></a></h2><p>DockerFile是构建文件，定义了一切步骤，源代码</p><p>DockerImages是通过DockerFile构建生成的镜像，最终发布和运行的产品</p><p>Docker容器是镜像运行起来提供服务器</p><h4 id="_3-1基础知识" tabindex="-1"><a class="header-anchor" href="#_3-1基础知识"><span>3.1基础知识</span></a></h4><ol><li><p>每个保留关键字（指令）都必须是大写字母</p></li><li><p>执行从上到下的顺序</p></li><li><p>#表示注解</p></li><li><p>每个指令都会创建提交一个新的镜像层，并提交</p></li></ol><h3 id="_3-2dockerfile的指令" tabindex="-1"><a class="header-anchor" href="#_3-2dockerfile的指令"><span>3.2DockerFile的指令</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>FROM            <span class="token comment">#指定基础镜像,一切从这开始（这个镜像的妈妈是谁）</span>
MAINTAINER      <span class="token comment">#指定维护信息，姓名+邮箱（告诉别人谁负责养他）</span>
RUN             <span class="token comment">#镜像构建的时候需要运行的命令（你想让他干啥）</span>
ADD             <span class="token comment">#步骤，添加内容（给他点创业资金）例如：加tomcat镜像</span>
WORKDIR         <span class="token comment">#设置当前工作目录也就是镜像目录（我是cd今天刚化了妆）</span>
VOLUME          <span class="token comment">#挂在目录（给他一个存放行李的地方）</span>
EXPOSE          <span class="token comment">#指定对外端口（要开的门牌号）</span>
CMD             <span class="token comment">#指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span>
ENTRYPOINT      <span class="token comment">#指定这个容器启动的时候要运行的命令，可以追加命令</span>
ONBUILD         <span class="token comment">#当构建一个被继承DockerFile这个时候会运行，触发指令</span>
COPY            <span class="token comment">#类似ADD，我们文件拷贝到镜像中</span>
ENV             <span class="token comment">#构建时候设置环境变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3写dockerfile文件" tabindex="-1"><a class="header-anchor" href="#_3-3写dockerfile文件"><span>3.3写DockerFile文件</span></a></h3><p>例子：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
<span class="token comment"># github中的centos的源文件</span>
FROM scratch
ADD centos-7-x86_64-docker.tar.xz /

LABEL <span class="token punctuation">\\</span>
    org.label-schema.schema-version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> <span class="token punctuation">\\</span>
    org.label-schema.name<span class="token operator">=</span><span class="token string">&quot;CentOS Base Image&quot;</span> <span class="token punctuation">\\</span>
    org.label-schema.vendor<span class="token operator">=</span><span class="token string">&quot;CentOS&quot;</span> <span class="token punctuation">\\</span>
    org.label-schema.license<span class="token operator">=</span><span class="token string">&quot;GPLv2&quot;</span> <span class="token punctuation">\\</span>
    org.label-schema.build-date<span class="token operator">=</span><span class="token string">&quot;20201113&quot;</span> <span class="token punctuation">\\</span>
    <span class="token assign-left variable">org.opencontainers.image.title</span><span class="token operator">=</span><span class="token string">&quot;CentOS Base Image&quot;</span> <span class="token punctuation">\\</span>
    <span class="token assign-left variable">org.opencontainers.image.vendor</span><span class="token operator">=</span><span class="token string">&quot;CentOS&quot;</span> <span class="token punctuation">\\</span>
    <span class="token assign-left variable">org.opencontainers.image.licenses</span><span class="token operator">=</span><span class="token string">&quot;GPL-2.0-only&quot;</span> <span class="token punctuation">\\</span>
    <span class="token assign-left variable">org.opencontainers.image.created</span><span class="token operator">=</span><span class="token string">&quot;2020-11-13 00:00:00+00:00&quot;</span>

CMD <span class="token punctuation">[</span><span class="token string">&quot;/bin/bash&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用原有的centos写一个自己的文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>FROM centos:7
MAINTAINER kdmvp&lt;1561790129@qq.com&gt;


ENV MYPATH /usr/local
WORKDIR $MYPATH

RUN yum -y install vim
RUN yum -y install net-tools

EXPOSE 9090

CMD echo $MYPATH
CMD echo &quot;--------end--------&quot;
CMD /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4构建镜像" tabindex="-1"><a class="header-anchor" href="#_3-4构建镜像"><span>3.4构建镜像</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker build -f 文件名 -t 镜像名：版本号 .

例：
docker build -f mydockerfile-centos -t mycentos:0.1 .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-发布镜像" tabindex="-1"><a class="header-anchor" href="#_4-发布镜像"><span>4.发布镜像</span></a></h2><h3 id="_4-1发布到docker-hub上" tabindex="-1"><a class="header-anchor" href="#_4-1发布到docker-hub上"><span>4.1发布到docker Hub上</span></a></h3><ul><li>命令行登录账号：<br><code>docker login -u username</code></li><li>新建一个tag，名字必须跟你注册账号一样<br><code>docker tag test:v1 username/test:v1</code></li><li>推上去<br><code>docker push username/test:v1</code></li><li>部署试下<br><code>docker run -dp 8080:8080 username/test:v1</code></li></ul><h3 id="_4-2发布到阿里云等云上" tabindex="-1"><a class="header-anchor" href="#_4-2发布到阿里云等云上"><span>4.2发布到阿里云等云上</span></a></h3><ul><li><p>登录阿里云</p></li><li><p>找到容器镜像服务</p></li><li><p>创建命名空间</p></li><li><p>创建容器镜像</p></li></ul><h2 id="_5-docker网络" tabindex="-1"><a class="header-anchor" href="#_5-docker网络"><span>5.docker网络</span></a></h2><p>在容器之间进行通信时我们需要把他们放在同一个网络下，因此可以创建一个虚拟的网络</p><ul><li>创建一个名为<code>test-net</code>的网络：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker network create 网络名

例：
docker network create test-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行 Redis 在 <code>test-net</code> 网络中，别名<code>redis</code></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -d --name 运行的镜像名 --network 网络名 --network-alias 别名 别名指向的容器
例：
docker run -d --name redis --network test-net --network-alias redis redis:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多命令</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker ps 查看当前运行中的容器
docker images 查看镜像列表
docker rm container-id 删除指定 id 的容器
docker stop/start container-id 停止/启动指定 id 的容器
docker rmi image-id 删除指定 id 的镜像
docker volume ls 查看 volume 列表
docker network ls 查看网络列表
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-docker-compose" tabindex="-1"><a class="header-anchor" href="#_6-docker-compose"><span>6.Docker-Compose</span></a></h2><p>如果项目依赖更多的第三方软件，我们需要管理的容器就更加多，每个都要单独配置运行，指定网络。我们使用 docker-compose 把项目的多个服务集合到一起，一键运行。</p><h3 id="_6-1安装docker-compose" tabindex="-1"><a class="header-anchor" href="#_6-1安装docker-compose"><span>6.1安装Docker-Compose</span></a></h3><ul><li>如果你是安装的桌面版 Docker，不需要额外安装，已经包含了。</li><li>如果是没图形界面的服务器版 Docker，你需要单独安装</li><li>运行<code>docker-compose</code>检查是否安装成功</li></ul><p>Linux</p><p>安装命令</p><div class="language-ruby line-numbers-mode" data-ext="rb" data-title="rb"><pre class="language-ruby"><code>sudo curl <span class="token operator">-</span><span class="token constant">L</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">/</span>compose<span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span><span class="token number">1.21</span><span class="token number">.2</span><span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token operator">-</span>$<span class="token punctuation">(</span>uname <span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token operator">-</span>$<span class="token punctuation">(</span>uname <span class="token operator">-</span>m<span class="token punctuation">)</span> <span class="token operator">-</span>o <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>docker<span class="token operator">-</span>compose
sudo chmod <span class="token operator">+</span>x <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>docker<span class="token operator">-</span>compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看安装是否成功</p><div class="language-undefined line-numbers-mode" data-ext="undefined" data-title="undefined"><pre class="language-undefined"><code>docker-compose -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-2编写脚本" tabindex="-1"><a class="header-anchor" href="#_6-2编写脚本"><span>6.2编写脚本</span></a></h3><p>要把项目依赖的多个服务集合到一起，我们需要编写一个<code>docker-compose.yml</code>文件，描述依赖哪些服务</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>version: &quot;3.7&quot;                #版本

services:                    #依赖哪些服务
  app:
    build: ./                #当前目录build
    ports:                   #暴露端口
      - 80:8080
    volumes:                 #挂载目录
      - ./:/app
    environment:             #设置时区
      - TZ=Asia/Shanghai
  redis:                     
    image: redis:5.0.13    
    volumes:
      - redis:/data
    environment:
      - TZ=Asia/Shanghai

volumes:
  redis:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3运行" tabindex="-1"><a class="header-anchor" href="#_6-3运行"><span>6.3运行</span></a></h3><p>在<code>docker-compose.yml</code> 文件所在目录，执行</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-4其他命令" tabindex="-1"><a class="header-anchor" href="#_6-4其他命令"><span>6.4其他命令</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>停止运行：docker-compose stop
重启：docker-compose restart
重启单个服务：docker-compose restart service-name
进入容器命令行：docker-compose exec service-name sh
查看容器运行log：docker-compose logs [service-name]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70),l=[i];function d(r,o){return n(),s("div",null,l)}const u=e(t,[["render",d],["__file","docker.html.vue"]]),v=JSON.parse(`{"path":"/posts/docker/docker.html","title":"Docker","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["笔记","计算机"],"tag":["docker","容器","分布式"],"description":"Docker 1.简介 Docker 是一个应用打包、分发、部署的工具，可以虚拟软件运行的环境 打包：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包 分发：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装 部署：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Wi...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/docker/docker.html"}],["meta",{"property":"og:site_name","content":"kdmvp's\\tblog"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"Docker 1.简介 Docker 是一个应用打包、分发、部署的工具，可以虚拟软件运行的环境 打包：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包 分发：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装 部署：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Wi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T06:44:44.000Z"}],["meta",{"property":"article:author","content":"林伟强"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"容器"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:modified_time","content":"2024-04-18T06:44:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-18T06:44:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"林伟强\\"}]}"]]},"headers":[{"level":2,"title":"1.简介","slug":"_1-简介","link":"#_1-简介","children":[{"level":3,"title":"1.1优点","slug":"_1-1优点","link":"#_1-1优点","children":[]},{"level":3,"title":"1.2重要概念","slug":"_1-2重要概念","link":"#_1-2重要概念","children":[]},{"level":3,"title":"1.3镜像加速源","slug":"_1-3镜像加速源","link":"#_1-3镜像加速源","children":[]}]},{"level":2,"title":"2.Docker快速安装软件","slug":"_2-docker快速安装软件","link":"#_2-docker快速安装软件","children":[{"level":3,"title":"2.1流程","slug":"_2-1流程","link":"#_2-1流程","children":[]}]},{"level":2,"title":"3.DockerFile","slug":"_3-dockerfile","link":"#_3-dockerfile","children":[{"level":3,"title":"3.2DockerFile的指令","slug":"_3-2dockerfile的指令","link":"#_3-2dockerfile的指令","children":[]},{"level":3,"title":"3.3写DockerFile文件","slug":"_3-3写dockerfile文件","link":"#_3-3写dockerfile文件","children":[]},{"level":3,"title":"3.4构建镜像","slug":"_3-4构建镜像","link":"#_3-4构建镜像","children":[]}]},{"level":2,"title":"4.发布镜像","slug":"_4-发布镜像","link":"#_4-发布镜像","children":[{"level":3,"title":"4.1发布到docker Hub上","slug":"_4-1发布到docker-hub上","link":"#_4-1发布到docker-hub上","children":[]},{"level":3,"title":"4.2发布到阿里云等云上","slug":"_4-2发布到阿里云等云上","link":"#_4-2发布到阿里云等云上","children":[]}]},{"level":2,"title":"5.docker网络","slug":"_5-docker网络","link":"#_5-docker网络","children":[]},{"level":2,"title":"6.Docker-Compose","slug":"_6-docker-compose","link":"#_6-docker-compose","children":[{"level":3,"title":"6.1安装Docker-Compose","slug":"_6-1安装docker-compose","link":"#_6-1安装docker-compose","children":[]},{"level":3,"title":"6.2编写脚本","slug":"_6-2编写脚本","link":"#_6-2编写脚本","children":[]},{"level":3,"title":"6.3运行","slug":"_6-3运行","link":"#_6-3运行","children":[]},{"level":3,"title":"6.4其他命令","slug":"_6-4其他命令","link":"#_6-4其他命令","children":[]}]}],"git":{"createdTime":1713422684000,"updatedTime":1713422684000,"contributors":[{"name":"kdmvp-lin","email":"1561790129@qq.com","commits":1}]},"readingTime":{"minutes":5.79,"words":1736},"filePathRelative":"posts/docker/docker.md","localizedDate":"2024年4月18日","excerpt":"\\n<h2>1.简介</h2>\\n<p>Docker 是一个应用打包、分发、部署的工具，可以虚拟软件运行的环境</p>\\n<p><strong>打包</strong>：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包<br>\\n<strong>分发</strong>：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装<br>\\n<strong>部署</strong>：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Windows/Mac/Linux。</p>\\n<h3>1.1优点</h3>\\n<h4>1.1.1相对于虚拟机优势</h4>","autoDesc":true}`);export{u as comp,v as data};
